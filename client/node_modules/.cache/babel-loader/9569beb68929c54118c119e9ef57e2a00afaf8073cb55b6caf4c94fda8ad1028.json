{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.dnsEncode = exports.namehash = exports.isValidName = exports.ensNormalize = void 0;\nconst index_js_1 = require(\"../crypto/index.js\");\nconst index_js_2 = require(\"../utils/index.js\");\nconst ens_normalize_1 = require(\"@adraffy/ens-normalize\");\nconst Zeros = new Uint8Array(32);\nZeros.fill(0);\nfunction checkComponent(comp) {\n  (0, index_js_2.assertArgument)(comp.length !== 0, \"invalid ENS name; empty component\", \"comp\", comp);\n  return comp;\n}\nfunction ensNameSplit(name) {\n  const bytes = (0, index_js_2.toUtf8Bytes)(ensNormalize(name));\n  const comps = [];\n  if (name.length === 0) {\n    return comps;\n  }\n  let last = 0;\n  for (let i = 0; i < bytes.length; i++) {\n    const d = bytes[i];\n    // A separator (i.e. \".\"); copy this component\n    if (d === 0x2e) {\n      comps.push(checkComponent(bytes.slice(last, i)));\n      last = i + 1;\n    }\n  }\n  // There was a stray separator at the end of the name\n  (0, index_js_2.assertArgument)(last < bytes.length, \"invalid ENS name; empty component\", \"name\", name);\n  comps.push(checkComponent(bytes.slice(last)));\n  return comps;\n}\n/**\n *  Returns the ENS %%name%% normalized.\n */\nfunction ensNormalize(name) {\n  try {\n    if (name.length === 0) {\n      throw new Error(\"empty label\");\n    }\n    return (0, ens_normalize_1.ens_normalize)(name);\n  } catch (error) {\n    (0, index_js_2.assertArgument)(false, `invalid ENS name (${error.message})`, \"name\", name);\n  }\n}\nexports.ensNormalize = ensNormalize;\n/**\n *  Returns ``true`` if %%name%% is a valid ENS name.\n */\nfunction isValidName(name) {\n  try {\n    return ensNameSplit(name).length !== 0;\n  } catch (error) {}\n  return false;\n}\nexports.isValidName = isValidName;\n/**\n *  Returns the [[link-namehash]] for %%name%%.\n */\nfunction namehash(name) {\n  (0, index_js_2.assertArgument)(typeof name === \"string\", \"invalid ENS name; not a string\", \"name\", name);\n  (0, index_js_2.assertArgument)(name.length, `invalid ENS name (empty label)`, \"name\", name);\n  let result = Zeros;\n  const comps = ensNameSplit(name);\n  while (comps.length) {\n    result = (0, index_js_1.keccak256)((0, index_js_2.concat)([result, (0, index_js_1.keccak256)(comps.pop())]));\n  }\n  return (0, index_js_2.hexlify)(result);\n}\nexports.namehash = namehash;\n/**\n *  Returns the DNS encoded %%name%%.\n *\n *  This is used for various parts of ENS name resolution, such\n *  as the wildcard resolution.\n */\nfunction dnsEncode(name, _maxLength) {\n  const length = _maxLength != null ? _maxLength : 63;\n  (0, index_js_2.assertArgument)(length <= 255, \"DNS encoded label cannot exceed 255\", \"length\", length);\n  return (0, index_js_2.hexlify)((0, index_js_2.concat)(ensNameSplit(name).map(comp => {\n    (0, index_js_2.assertArgument)(comp.length <= length, `label ${JSON.stringify(name)} exceeds ${length} bytes`, \"name\", name);\n    const bytes = new Uint8Array(comp.length + 1);\n    bytes.set(comp, 1);\n    bytes[0] = bytes.length - 1;\n    return bytes;\n  }))) + \"00\";\n}\nexports.dnsEncode = dnsEncode;","map":{"version":3,"names":["index_js_1","require","index_js_2","ens_normalize_1","Zeros","Uint8Array","fill","checkComponent","comp","assertArgument","length","ensNameSplit","name","bytes","toUtf8Bytes","ensNormalize","comps","last","i","d","push","slice","Error","ens_normalize","error","message","exports","isValidName","namehash","result","keccak256","concat","pop","hexlify","dnsEncode","_maxLength","map","JSON","stringify","set"],"sources":["C:\\project\\fiverr-clone\\client\\node_modules\\ethers\\src.ts\\hash\\namehash.ts"],"sourcesContent":["\nimport { keccak256 } from \"../crypto/index.js\";\nimport {\n    concat, hexlify, assertArgument, toUtf8Bytes\n} from \"../utils/index.js\";\n\n\nimport { ens_normalize } from \"@adraffy/ens-normalize\";\n\nconst Zeros = new Uint8Array(32);\nZeros.fill(0);\n\nfunction checkComponent(comp: Uint8Array): Uint8Array {\n    assertArgument(comp.length !== 0, \"invalid ENS name; empty component\", \"comp\", comp)\n    return comp;\n}\n\nfunction ensNameSplit(name: string): Array<Uint8Array> {\n    const bytes = toUtf8Bytes(ensNormalize(name));\n    const comps: Array<Uint8Array> = [ ];\n\n    if (name.length === 0) { return comps; }\n\n    let last = 0;\n    for (let i = 0; i < bytes.length; i++) {\n        const d = bytes[i];\n\n        // A separator (i.e. \".\"); copy this component\n        if (d === 0x2e) {\n            comps.push(checkComponent(bytes.slice(last, i)));\n            last = i + 1;\n        }\n    }\n\n    // There was a stray separator at the end of the name\n    assertArgument(last < bytes.length, \"invalid ENS name; empty component\", \"name\", name);\n\n    comps.push(checkComponent(bytes.slice(last)));\n    return comps;\n}\n\n/**\n *  Returns the ENS %%name%% normalized.\n */\nexport function ensNormalize(name: string): string {\n    try {\n        if (name.length === 0) { throw new Error(\"empty label\"); }\n        return ens_normalize(name);\n    } catch (error: any) {\n        assertArgument(false, `invalid ENS name (${ error.message })`, \"name\", name);\n    }\n}\n\n/**\n *  Returns ``true`` if %%name%% is a valid ENS name.\n */\nexport function isValidName(name: string): name is string {\n    try {\n        return (ensNameSplit(name).length !== 0);\n    } catch (error) { }\n    return false;\n}\n\n/**\n *  Returns the [[link-namehash]] for %%name%%.\n */\nexport function namehash(name: string): string {\n    assertArgument(typeof(name) === \"string\", \"invalid ENS name; not a string\", \"name\", name);\n\n    assertArgument(name.length, `invalid ENS name (empty label)`, \"name\", name);\n\n    let result: string | Uint8Array = Zeros;\n\n    const comps = ensNameSplit(name);\n    while (comps.length) {\n        result = keccak256(concat([ result, keccak256(<Uint8Array>(comps.pop()))] ));\n    }\n\n    return hexlify(result);\n}\n\n/**\n *  Returns the DNS encoded %%name%%.\n *\n *  This is used for various parts of ENS name resolution, such\n *  as the wildcard resolution.\n */\nexport function dnsEncode(name: string, _maxLength?: number): string {\n    const length = (_maxLength != null) ? _maxLength: 63;\n\n    assertArgument(length <= 255, \"DNS encoded label cannot exceed 255\", \"length\", length);\n\n    return hexlify(concat(ensNameSplit(name).map((comp) => {\n        assertArgument(comp.length <= length, `label ${ JSON.stringify(name) } exceeds ${ length } bytes`, \"name\", name);\n\n        const bytes = new Uint8Array(comp.length + 1);\n        bytes.set(comp, 1);\n        bytes[0] = bytes.length - 1;\n        return bytes;\n    }))) + \"00\";\n}\n"],"mappings":";;;;;;AACA,MAAAA,UAAA,GAAAC,OAAA;AACA,MAAAC,UAAA,GAAAD,OAAA;AAKA,MAAAE,eAAA,GAAAF,OAAA;AAEA,MAAMG,KAAK,GAAG,IAAIC,UAAU,CAAC,EAAE,CAAC;AAChCD,KAAK,CAACE,IAAI,CAAC,CAAC,CAAC;AAEb,SAASC,cAAcA,CAACC,IAAgB;EACpC,IAAAN,UAAA,CAAAO,cAAc,EAACD,IAAI,CAACE,MAAM,KAAK,CAAC,EAAE,mCAAmC,EAAE,MAAM,EAAEF,IAAI,CAAC;EACpF,OAAOA,IAAI;AACf;AAEA,SAASG,YAAYA,CAACC,IAAY;EAC9B,MAAMC,KAAK,GAAG,IAAAX,UAAA,CAAAY,WAAW,EAACC,YAAY,CAACH,IAAI,CAAC,CAAC;EAC7C,MAAMI,KAAK,GAAsB,EAAG;EAEpC,IAAIJ,IAAI,CAACF,MAAM,KAAK,CAAC,EAAE;IAAE,OAAOM,KAAK;;EAErC,IAAIC,IAAI,GAAG,CAAC;EACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,KAAK,CAACH,MAAM,EAAEQ,CAAC,EAAE,EAAE;IACnC,MAAMC,CAAC,GAAGN,KAAK,CAACK,CAAC,CAAC;IAElB;IACA,IAAIC,CAAC,KAAK,IAAI,EAAE;MACZH,KAAK,CAACI,IAAI,CAACb,cAAc,CAACM,KAAK,CAACQ,KAAK,CAACJ,IAAI,EAAEC,CAAC,CAAC,CAAC,CAAC;MAChDD,IAAI,GAAGC,CAAC,GAAG,CAAC;;;EAIpB;EACA,IAAAhB,UAAA,CAAAO,cAAc,EAACQ,IAAI,GAAGJ,KAAK,CAACH,MAAM,EAAE,mCAAmC,EAAE,MAAM,EAAEE,IAAI,CAAC;EAEtFI,KAAK,CAACI,IAAI,CAACb,cAAc,CAACM,KAAK,CAACQ,KAAK,CAACJ,IAAI,CAAC,CAAC,CAAC;EAC7C,OAAOD,KAAK;AAChB;AAEA;;;AAGA,SAAgBD,YAAYA,CAACH,IAAY;EACrC,IAAI;IACA,IAAIA,IAAI,CAACF,MAAM,KAAK,CAAC,EAAE;MAAE,MAAM,IAAIY,KAAK,CAAC,aAAa,CAAC;;IACvD,OAAO,IAAAnB,eAAA,CAAAoB,aAAa,EAACX,IAAI,CAAC;GAC7B,CAAC,OAAOY,KAAU,EAAE;IACjB,IAAAtB,UAAA,CAAAO,cAAc,EAAC,KAAK,EAAE,qBAAsBe,KAAK,CAACC,OAAQ,GAAG,EAAE,MAAM,EAAEb,IAAI,CAAC;;AAEpF;AAPAc,OAAA,CAAAX,YAAA,GAAAA,YAAA;AASA;;;AAGA,SAAgBY,WAAWA,CAACf,IAAY;EACpC,IAAI;IACA,OAAQD,YAAY,CAACC,IAAI,CAAC,CAACF,MAAM,KAAK,CAAC;GAC1C,CAAC,OAAOc,KAAK,EAAE;EAChB,OAAO,KAAK;AAChB;AALAE,OAAA,CAAAC,WAAA,GAAAA,WAAA;AAOA;;;AAGA,SAAgBC,QAAQA,CAAChB,IAAY;EACjC,IAAAV,UAAA,CAAAO,cAAc,EAAC,OAAOG,IAAK,KAAK,QAAQ,EAAE,gCAAgC,EAAE,MAAM,EAAEA,IAAI,CAAC;EAEzF,IAAAV,UAAA,CAAAO,cAAc,EAACG,IAAI,CAACF,MAAM,EAAE,gCAAgC,EAAE,MAAM,EAAEE,IAAI,CAAC;EAE3E,IAAIiB,MAAM,GAAwBzB,KAAK;EAEvC,MAAMY,KAAK,GAAGL,YAAY,CAACC,IAAI,CAAC;EAChC,OAAOI,KAAK,CAACN,MAAM,EAAE;IACjBmB,MAAM,GAAG,IAAA7B,UAAA,CAAA8B,SAAS,EAAC,IAAA5B,UAAA,CAAA6B,MAAM,EAAC,CAAEF,MAAM,EAAE,IAAA7B,UAAA,CAAA8B,SAAS,EAAcd,KAAK,CAACgB,GAAG,EAAG,CAAC,CAAC,CAAE,CAAC;;EAGhF,OAAO,IAAA9B,UAAA,CAAA+B,OAAO,EAACJ,MAAM,CAAC;AAC1B;AAbAH,OAAA,CAAAE,QAAA,GAAAA,QAAA;AAeA;;;;;;AAMA,SAAgBM,SAASA,CAACtB,IAAY,EAAEuB,UAAmB;EACvD,MAAMzB,MAAM,GAAIyB,UAAU,IAAI,IAAI,GAAIA,UAAU,GAAE,EAAE;EAEpD,IAAAjC,UAAA,CAAAO,cAAc,EAACC,MAAM,IAAI,GAAG,EAAE,qCAAqC,EAAE,QAAQ,EAAEA,MAAM,CAAC;EAEtF,OAAO,IAAAR,UAAA,CAAA+B,OAAO,EAAC,IAAA/B,UAAA,CAAA6B,MAAM,EAACpB,YAAY,CAACC,IAAI,CAAC,CAACwB,GAAG,CAAE5B,IAAI,IAAI;IAClD,IAAAN,UAAA,CAAAO,cAAc,EAACD,IAAI,CAACE,MAAM,IAAIA,MAAM,EAAE,SAAU2B,IAAI,CAACC,SAAS,CAAC1B,IAAI,CAAE,YAAaF,MAAO,QAAQ,EAAE,MAAM,EAAEE,IAAI,CAAC;IAEhH,MAAMC,KAAK,GAAG,IAAIR,UAAU,CAACG,IAAI,CAACE,MAAM,GAAG,CAAC,CAAC;IAC7CG,KAAK,CAAC0B,GAAG,CAAC/B,IAAI,EAAE,CAAC,CAAC;IAClBK,KAAK,CAAC,CAAC,CAAC,GAAGA,KAAK,CAACH,MAAM,GAAG,CAAC;IAC3B,OAAOG,KAAK;EAChB,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI;AACf;AAbAa,OAAA,CAAAQ,SAAA,GAAAA,SAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}