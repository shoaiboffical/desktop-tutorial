{"ast":null,"code":"var _jsxFileName = \"C:\\\\project\\\\fiverr-clone\\\\client\\\\src\\\\components\\\\checkOutForm\\\\CheckOutForm.jsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import {\n//   PaymentElement,\n//   useStripe,\n//   useElements,\n// } from \"@stripe/react-stripe-js\";\n// import './checkOutForm.scss';\n// const CheckoutForm = () => {\n//   const stripe = useStripe();\n//   const elements = useElements();\n\n//   // const [email, ] = useState(\"\");\n//   const [message, setMessage] = useState(null);\n//   const [isLoading, setIsLoading] = useState(false);\n\n//   useEffect(() => {\n//     if (!stripe) {\n//       return;\n//     }\n\n//     const clientSecret = new URLSearchParams(window.location.search).get(\n//       \"payment_intent_client_secret\"\n//     );\n\n//     if (!clientSecret) {\n//       return;\n//     }\n\n//     stripe.retrievePaymentIntent(clientSecret).then(({ paymentIntent }) => {\n//       switch (paymentIntent.status) {\n//         case \"succeeded\":\n//           setMessage(\"Payment succeeded!\");\n//           break;\n//         case \"processing\":\n//           setMessage(\"Your payment is processing.\");\n//           break;\n//         case \"requires_payment_method\":\n//           setMessage(\"Your payment was not successful, please try again.\");\n//           break;\n//         default:\n//           setMessage(\"Something went wrong.\");\n//           break;\n//       }\n//     });\n//   }, [stripe]);\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     if (!stripe || !elements) {\n//       // Stripe.js has not yet loaded.\n//       // Make sure to disable form submission until Stripe.js has loaded.\n//       return;\n//     }\n\n//     setIsLoading(true);\n\n//     const { error } = await stripe.confirmPayment({\n//       elements,\n//       confirmParams: {\n//         // Make sure to change this to your payment completion page\n//         return_url: \"http://localhost:3000/success\",\n//       },\n//     });\n\n//     // This point will only be reached if there is an immediate error when\n//     // confirming the payment. Otherwise, your customer will be redirected to\n//     // your `return_url`. For some payment methods like iDEAL, your customer will\n//     // be redirected to an intermediate site first to authorize the payment, then\n//     // redirected to the `return_url`.\n//     if (error.type === \"card_error\" || error.type === \"validation_error\") {\n//       setMessage(error.message);\n//     } else {\n//       setMessage(\"An unexpected error occurred.\");\n//     }\n\n//     setIsLoading(false);\n//   };\n\n//   const paymentElementOptions = {\n//     layout: \"accordion\",\n//     variables: { colorPrimaryText: '#262626' },\n//     defaultCollapsed: false,\n//   };\n\n//   return (\n//     <div className=\"checkOutForm\">\n//     <form id=\"payment-form\" onSubmit={handleSubmit}>\n//       <PaymentElement id=\"payment-element\" options={paymentElementOptions} />\n//       <button disabled={isLoading || !stripe || !elements} id=\"submit\">\n//         <span id=\"button-text\">\n//           {isLoading ? <div className=\"spinner\" id=\"spinner\"></div> : \"Pay now\"}\n//         </span>\n//       </button>\n//       {/* Show any error or success messages */}\n//       {message && <div id=\"payment-message\">{message}</div>}\n//     </form>\n//     </div>\n//   );\n// };\n\n// export default CheckoutForm;\nimport React, { useState } from \"react\";\nimport { ethers } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CheckoutForm = ({\n  gigData,\n  userData\n}) => {\n  _s();\n  const [message, setMessage] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const handlePayment = async () => {\n    setIsLoading(true);\n    setMessage(\"\");\n    if (!window.ethereum) {\n      setMessage(\"Ethereum wallet is not available. Please install MetaMask.\");\n      setIsLoading(false);\n      return;\n    }\n    try {\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const transactionParameters = {\n        to: userData.wallet_address,\n        // Must be a checksummed recipient address\n        from: accounts[0],\n        // Use the first account to send the transaction\n        value: ethers.utils.parseUnits(gigData.price.toString(), \"ether\").toHexString() // Convert Ether to Wei\n      };\n      const tx = await signer.sendTransaction(transactionParameters);\n      setMessage(`Transaction sent. Transaction Hash: ${tx.hash}`);\n      setIsLoading(false);\n    } catch (error) {\n      console.error(\"Payment failed:\", error);\n      setMessage(\"Payment failed. Please try again.\");\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"checkout-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Pay for \", gigData.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Amount: \", gigData.price, \" Ether\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handlePayment,\n      disabled: isLoading,\n      children: isLoading ? \"Processing...\" : \"Pay Now\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 5\n  }, this);\n};\n_s(CheckoutForm, \"uE+Xt7/IincUlnD2+zAweodRULw=\");\n_c = CheckoutForm;\nexport default CheckoutForm;\nvar _c;\n$RefreshReg$(_c, \"CheckoutForm\");","map":{"version":3,"names":["React","useState","ethers","jsxDEV","_jsxDEV","CheckoutForm","gigData","userData","_s","message","setMessage","isLoading","setIsLoading","handlePayment","window","ethereum","accounts","request","method","provider","providers","Web3Provider","signer","getSigner","transactionParameters","to","wallet_address","from","value","utils","parseUnits","price","toString","toHexString","tx","sendTransaction","hash","error","console","className","children","name","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/project/fiverr-clone/client/src/components/checkOutForm/CheckOutForm.jsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import {\r\n//   PaymentElement,\r\n//   useStripe,\r\n//   useElements,\r\n// } from \"@stripe/react-stripe-js\";\r\n// import './checkOutForm.scss';\r\n// const CheckoutForm = () => {\r\n//   const stripe = useStripe();\r\n//   const elements = useElements();\r\n\r\n//   // const [email, ] = useState(\"\");\r\n//   const [message, setMessage] = useState(null);\r\n//   const [isLoading, setIsLoading] = useState(false);\r\n\r\n//   useEffect(() => {\r\n//     if (!stripe) {\r\n//       return;\r\n//     }\r\n\r\n//     const clientSecret = new URLSearchParams(window.location.search).get(\r\n//       \"payment_intent_client_secret\"\r\n//     );\r\n\r\n//     if (!clientSecret) {\r\n//       return;\r\n//     }\r\n\r\n//     stripe.retrievePaymentIntent(clientSecret).then(({ paymentIntent }) => {\r\n//       switch (paymentIntent.status) {\r\n//         case \"succeeded\":\r\n//           setMessage(\"Payment succeeded!\");\r\n//           break;\r\n//         case \"processing\":\r\n//           setMessage(\"Your payment is processing.\");\r\n//           break;\r\n//         case \"requires_payment_method\":\r\n//           setMessage(\"Your payment was not successful, please try again.\");\r\n//           break;\r\n//         default:\r\n//           setMessage(\"Something went wrong.\");\r\n//           break;\r\n//       }\r\n//     });\r\n//   }, [stripe]);\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n\r\n//     if (!stripe || !elements) {\r\n//       // Stripe.js has not yet loaded.\r\n//       // Make sure to disable form submission until Stripe.js has loaded.\r\n//       return;\r\n//     }\r\n\r\n//     setIsLoading(true);\r\n\r\n//     const { error } = await stripe.confirmPayment({\r\n//       elements,\r\n//       confirmParams: {\r\n//         // Make sure to change this to your payment completion page\r\n//         return_url: \"http://localhost:3000/success\",\r\n//       },\r\n//     });\r\n\r\n//     // This point will only be reached if there is an immediate error when\r\n//     // confirming the payment. Otherwise, your customer will be redirected to\r\n//     // your `return_url`. For some payment methods like iDEAL, your customer will\r\n//     // be redirected to an intermediate site first to authorize the payment, then\r\n//     // redirected to the `return_url`.\r\n//     if (error.type === \"card_error\" || error.type === \"validation_error\") {\r\n//       setMessage(error.message);\r\n//     } else {\r\n//       setMessage(\"An unexpected error occurred.\");\r\n//     }\r\n\r\n//     setIsLoading(false);\r\n//   };\r\n\r\n//   const paymentElementOptions = {\r\n//     layout: \"accordion\",\r\n//     variables: { colorPrimaryText: '#262626' },\r\n//     defaultCollapsed: false,\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"checkOutForm\">\r\n//     <form id=\"payment-form\" onSubmit={handleSubmit}>\r\n//       <PaymentElement id=\"payment-element\" options={paymentElementOptions} />\r\n//       <button disabled={isLoading || !stripe || !elements} id=\"submit\">\r\n//         <span id=\"button-text\">\r\n//           {isLoading ? <div className=\"spinner\" id=\"spinner\"></div> : \"Pay now\"}\r\n//         </span>\r\n//       </button>\r\n//       {/* Show any error or success messages */}\r\n//       {message && <div id=\"payment-message\">{message}</div>}\r\n//     </form>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default CheckoutForm;\r\nimport React, { useState } from \"react\";\r\nimport { ethers } from 'ethers';\r\n\r\nconst CheckoutForm = ({ gigData, userData }) => {\r\n  const [message, setMessage] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const handlePayment = async () => {\r\n    setIsLoading(true);\r\n    setMessage(\"\");\r\n\r\n    if (!window.ethereum) {\r\n      setMessage(\"Ethereum wallet is not available. Please install MetaMask.\");\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n      const signer = provider.getSigner();\r\n\r\n      const transactionParameters = {\r\n        to: userData.wallet_address, // Must be a checksummed recipient address\r\n        from: accounts[0], // Use the first account to send the transaction\r\n        value: ethers.utils.parseUnits(gigData.price.toString(), \"ether\").toHexString() // Convert Ether to Wei\r\n      };\r\n\r\n      const tx = await signer.sendTransaction(transactionParameters);\r\n      setMessage(`Transaction sent. Transaction Hash: ${tx.hash}`);\r\n      setIsLoading(false);\r\n    } catch (error) {\r\n      console.error(\"Payment failed:\", error);\r\n      setMessage(\"Payment failed. Please try again.\");\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"checkout-form\">\r\n      <h1>Pay for {gigData.name}</h1>\r\n      <p>Amount: {gigData.price} Ether</p>\r\n      <button onClick={handlePayment} disabled={isLoading}>\r\n        {isLoading ? \"Processing...\" : \"Pay Now\"}\r\n      </button>\r\n      {message && <p>{message}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CheckoutForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}