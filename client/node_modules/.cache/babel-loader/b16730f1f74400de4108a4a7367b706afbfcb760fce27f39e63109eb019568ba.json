{"ast":null,"code":"var _jsxFileName = \"C:\\\\project\\\\fiverr-clone\\\\client\\\\src\\\\pages\\\\pay\\\\Pay.jsx\",\n  _s = $RefreshSig$();\n// // import React, { useEffect, useState } from \"react\";\n// import React from \"react\";\n// import \"./pay.scss\";\n// import {ethers} from 'ethers';\n\n// // import { loadStripe } from \"@stripe/stripe-js\";\n//import { Elements } from \"@stripe/react-stripe-js\";\n// // import newRequest from \"../../utils/newRequest\";\n// // import { useParams } from \"react-router-dom\";\n//import CheckoutForm from \"../../components/checkOutForm/CheckOutForm\";\n\n// import { Slider } from \"infinite-react-carousel\";\n// import { useQuery } from \"@tanstack/react-query\";\n// import newRequest from \"../../utils/newRequest\";\n// import { Link, useParams } from \"react-router-dom\";\n// import Reviews from \"../../components/reviews/Reviews\";\n\n// const Pay = () => {\n\n//   const { id } = useParams();\n//   // console.log(id);\n//   const { data } = useQuery({\n//       queryKey: ['gig'],\n//       queryFn: () =>\n//           newRequest.get(`/gigs/single/${id}`)\n//               .then((res) => {\n//                   return res.data;\n//               })\n//   });\n//   const userId=data?.userId;\n//   const {  data: dataUser } = useQuery({\n//       queryKey: ['user'],\n//       queryFn: () =>\n//           newRequest.get(`/users/${userId}`)\n//               .then((res) => {\n//                   return res.data;    \n//               }),enabled:!!userId,\n//   });\n//   console.log(\"------------>>>>>>>>>>-------\");\n\n//    console.log(\"User's Wallet Address:\", dataUser?.username);\n//    console.log(\"User's Wallet Address:\", dataUser?.wallet_address);\n\n// console.log(\"Gig's Title:\", data?.price);\n\n// const requestAccounts = async () => {\n//   try {\n\n//     const accounts = await window.ethereum.request({\n//       method: 'eth_requestAccounts'\n//     });\n//     console.log(accounts); // Do something with the accounts\n\n//     // If you're sending a transaction, ensure this is in response to a user action\n\n//     const transactionParameters = {\n//       from: accounts,\n//       to: dataUser?.wallet_address,\n//       gas: \"0x76c0\", // 30400\n//       gasPrice: \"0x9184e72a000\", // 10000000000000\n//       value: data?.price, // 2441406250\n//       data: \"0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675\",\n//     };\n\n//     const txHash = await window.ethereum.request({\n//       method: 'eth_sendTransaction',\n//       params: [transactionParameters],\n//     });\n//     console.log(txHash); // Use the transaction hash as needed\n\n//   } catch (error) {\n//     console.error(error);\n//   }\n// };\n\n// requestAccounts();\n//   return <div className=\"pay\">\n//     {/* {clientSecret && (\n//         <Elements options={options} stripe={stripePromise}>\n//           <CheckoutForm />\n//         </Elements>\n//       )} */}\n\n//   </div>;\n// };\n\n// export default Pay;\n\n// import React, { useEffect } from \"react\";\n// import \"./pay.scss\";\n// import { useQuery } from \"@tanstack/react-query\";\n// import newRequest from \"../../utils/newRequest\";\n// import { useParams } from \"react-router-dom\";\n// import Reviews from \"../../components/reviews/Reviews\";\n// import {ethers} from 'ethers';\n\n// const Pay = () => {\n//   const { id } = useParams();\n\n//   const { data: gigData } = useQuery({\n//       queryKey: ['gig'],\n//       queryFn: () => newRequest.get(`/gigs/single/${id}`).then(res => res.data)\n//   });\n\n//   const userId = gigData?.userId;\n\n//   const { data: userData } = useQuery({\n//       queryKey: ['user'],\n//       queryFn: () => newRequest.get(`/users/${userId}`).then(res => res.data),    \n//       enabled: !!userId,\n//   });\n\n//   useEffect(() => {\n//     const requestAccounts = async () => {\n//       if (!window.ethereum) {\n//         console.error(\"Ethereum object not found. You need to install MetaMask or another Ethereum wallet.\");\n//         return;\n//       }\n\n//       try {\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n//         console.log(\"Connected accounts:\", accounts);\n\n//         // Define the transaction parameters\n//         const transactionParameters = {\n//           from: accounts[0], // Use the first account\n//           to: userData?.wallet_address,\n//           gas: \"0x5208\", // Set to 21000, which is the basic transaction cost\n//           gasPrice: \"0x3B9ACA00\", // Adjusted to a lower typical value, e.g., 1 Gwei\n//           value: ethers.utils.parseUnits(gigData?.price.toString() || \"0\", \"ether\").toHexString(),\n\n//         };\n\n//         // Send the transaction\n//         const txHash = await window.ethereum.request({\n//           method: 'eth_sendTransaction',\n//           params: [transactionParameters],\n//         });\n//         console.log(\"Transaction hash:\", txHash);\n\n//       } catch (error) {\n//         console.error(\"Error requesting accounts or sending transaction:\", error);\n//       }\n//     };\n\n//     // Call requestAccounts if both gigData and userData are loaded\n//     if (gigData && userData) {\n//       requestAccounts();\n//     }\n//   }, [gigData, userData]); // useEffect will run when gigData and userData change\n\n//   return (\n//     <div className=\"pay\">\n//       {/* UI elements */}\n//              <Reviews gigId={id} key={id}></Reviews>\n//     </div>\n//   );\n// };\n\n// export default Pay;\n\nimport React, { useEffect } from \"react\";\nimport \"./pay.scss\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport newRequest from \"../../utils/newRequest\";\nimport { useParams } from \"react-router-dom\";\nimport CheckoutForm from \"../../components/checkOutForm/CheckOutForm\"; // Import CheckoutForm\nimport { ethers } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Pay = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const {\n    data: gigData,\n    isLoading: isLoadingGig\n  } = useQuery({\n    queryKey: ['gig'],\n    queryFn: () => newRequest.get(`/gigs/single/${id}`).then(res => res.data)\n  });\n  const {\n    data: userData,\n    isLoading: isLoadingUser\n  } = useQuery({\n    queryKey: ['user', gigData === null || gigData === void 0 ? void 0 : gigData.userId],\n    queryFn: () => newRequest.get(`/users/${gigData === null || gigData === void 0 ? void 0 : gigData.userId}`).then(res => res.data),\n    enabled: !!(gigData !== null && gigData !== void 0 && gigData.userId)\n  });\n  if (isLoadingGig || isLoadingUser) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pay\",\n    children: /*#__PURE__*/_jsxDEV(CheckoutForm, {\n      gigData: gigData,\n      userData: userData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 198,\n    columnNumber: 5\n  }, this);\n};\n_s(Pay, \"K88zsQu1tnAG9X+ozp22T8uZwN0=\", false, function () {\n  return [useParams, useQuery, useQuery];\n});\n_c = Pay;\nexport default Pay;\nvar _c;\n$RefreshReg$(_c, \"Pay\");","map":{"version":3,"names":["React","useEffect","useQuery","newRequest","useParams","CheckoutForm","ethers","jsxDEV","_jsxDEV","Pay","_s","id","data","gigData","isLoading","isLoadingGig","queryKey","queryFn","get","then","res","userData","isLoadingUser","userId","enabled","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["C:/project/fiverr-clone/client/src/pages/pay/Pay.jsx"],"sourcesContent":["// // import React, { useEffect, useState } from \"react\";\r\n// import React from \"react\";\r\n// import \"./pay.scss\";\r\n// import {ethers} from 'ethers';\r\n\r\n// // import { loadStripe } from \"@stripe/stripe-js\";\r\n //import { Elements } from \"@stripe/react-stripe-js\";\r\n// // import newRequest from \"../../utils/newRequest\";\r\n// // import { useParams } from \"react-router-dom\";\r\n //import CheckoutForm from \"../../components/checkOutForm/CheckOutForm\";\r\n\r\n// import { Slider } from \"infinite-react-carousel\";\r\n// import { useQuery } from \"@tanstack/react-query\";\r\n// import newRequest from \"../../utils/newRequest\";\r\n// import { Link, useParams } from \"react-router-dom\";\r\n// import Reviews from \"../../components/reviews/Reviews\";\r\n\r\n\r\n// const Pay = () => {\r\n\r\n//   const { id } = useParams();\r\n//   // console.log(id);\r\n//   const { data } = useQuery({\r\n//       queryKey: ['gig'],\r\n//       queryFn: () =>\r\n//           newRequest.get(`/gigs/single/${id}`)\r\n//               .then((res) => {\r\n//                   return res.data;\r\n//               })\r\n//   });\r\n//   const userId=data?.userId;\r\n//   const {  data: dataUser } = useQuery({\r\n//       queryKey: ['user'],\r\n//       queryFn: () =>\r\n//           newRequest.get(`/users/${userId}`)\r\n//               .then((res) => {\r\n//                   return res.data;    \r\n//               }),enabled:!!userId,\r\n//   });\r\n//   console.log(\"------------>>>>>>>>>>-------\");\r\n   \r\n//    console.log(\"User's Wallet Address:\", dataUser?.username);\r\n//    console.log(\"User's Wallet Address:\", dataUser?.wallet_address);\r\n\r\n// console.log(\"Gig's Title:\", data?.price);\r\n\r\n// const requestAccounts = async () => {\r\n//   try {\r\n   \r\n//     const accounts = await window.ethereum.request({\r\n//       method: 'eth_requestAccounts'\r\n//     });\r\n//     console.log(accounts); // Do something with the accounts\r\n\r\n//     // If you're sending a transaction, ensure this is in response to a user action\r\n    \r\n//     const transactionParameters = {\r\n//       from: accounts,\r\n//       to: dataUser?.wallet_address,\r\n//       gas: \"0x76c0\", // 30400\r\n//       gasPrice: \"0x9184e72a000\", // 10000000000000\r\n//       value: data?.price, // 2441406250\r\n//       data: \"0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675\",\r\n//     };\r\n\r\n//     const txHash = await window.ethereum.request({\r\n//       method: 'eth_sendTransaction',\r\n//       params: [transactionParameters],\r\n//     });\r\n//     console.log(txHash); // Use the transaction hash as needed\r\n   \r\n//   } catch (error) {\r\n//     console.error(error);\r\n//   }\r\n// };\r\n\r\n// requestAccounts();\r\n//   return <div className=\"pay\">\r\n//     {/* {clientSecret && (\r\n//         <Elements options={options} stripe={stripePromise}>\r\n//           <CheckoutForm />\r\n//         </Elements>\r\n//       )} */}\r\n \r\n  \r\n    \r\n      \r\n//   </div>;\r\n// };\r\n\r\n// export default Pay;\r\n\r\n\r\n\r\n// import React, { useEffect } from \"react\";\r\n// import \"./pay.scss\";\r\n// import { useQuery } from \"@tanstack/react-query\";\r\n// import newRequest from \"../../utils/newRequest\";\r\n// import { useParams } from \"react-router-dom\";\r\n// import Reviews from \"../../components/reviews/Reviews\";\r\n// import {ethers} from 'ethers';\r\n\r\n// const Pay = () => {\r\n//   const { id } = useParams();\r\n\r\n//   const { data: gigData } = useQuery({\r\n//       queryKey: ['gig'],\r\n//       queryFn: () => newRequest.get(`/gigs/single/${id}`).then(res => res.data)\r\n//   });\r\n\r\n//   const userId = gigData?.userId;\r\n\r\n//   const { data: userData } = useQuery({\r\n//       queryKey: ['user'],\r\n//       queryFn: () => newRequest.get(`/users/${userId}`).then(res => res.data),    \r\n//       enabled: !!userId,\r\n//   });\r\n\r\n//   useEffect(() => {\r\n//     const requestAccounts = async () => {\r\n//       if (!window.ethereum) {\r\n//         console.error(\"Ethereum object not found. You need to install MetaMask or another Ethereum wallet.\");\r\n//         return;\r\n//       }\r\n\r\n//       try {\r\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n//         console.log(\"Connected accounts:\", accounts);\r\n\r\n//         // Define the transaction parameters\r\n//         const transactionParameters = {\r\n//           from: accounts[0], // Use the first account\r\n//           to: userData?.wallet_address,\r\n//           gas: \"0x5208\", // Set to 21000, which is the basic transaction cost\r\n//           gasPrice: \"0x3B9ACA00\", // Adjusted to a lower typical value, e.g., 1 Gwei\r\n//           value: ethers.utils.parseUnits(gigData?.price.toString() || \"0\", \"ether\").toHexString(),\r\n        \r\n//         };\r\n\r\n//         // Send the transaction\r\n//         const txHash = await window.ethereum.request({\r\n//           method: 'eth_sendTransaction',\r\n//           params: [transactionParameters],\r\n//         });\r\n//         console.log(\"Transaction hash:\", txHash);\r\n\r\n//       } catch (error) {\r\n//         console.error(\"Error requesting accounts or sending transaction:\", error);\r\n//       }\r\n//     };\r\n\r\n//     // Call requestAccounts if both gigData and userData are loaded\r\n//     if (gigData && userData) {\r\n//       requestAccounts();\r\n//     }\r\n//   }, [gigData, userData]); // useEffect will run when gigData and userData change\r\n\r\n//   return (\r\n//     <div className=\"pay\">\r\n//       {/* UI elements */}\r\n//              <Reviews gigId={id} key={id}></Reviews>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Pay;\r\n\r\n\r\n\r\n\r\nimport React, { useEffect } from \"react\";\r\nimport \"./pay.scss\";\r\nimport { useQuery } from \"@tanstack/react-query\";\r\nimport newRequest from \"../../utils/newRequest\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport CheckoutForm from \"../../components/checkOutForm/CheckOutForm\"; // Import CheckoutForm\r\nimport { ethers } from 'ethers';\r\n\r\nconst Pay = () => {\r\n  const { id } = useParams();\r\n\r\n  const { data: gigData, isLoading: isLoadingGig } = useQuery({\r\n    queryKey: ['gig'],\r\n    queryFn: () => newRequest.get(`/gigs/single/${id}`).then(res => res.data)\r\n  });\r\n\r\n  const { data: userData, isLoading: isLoadingUser } = useQuery({\r\n    queryKey: ['user', gigData?.userId],\r\n    queryFn: () => newRequest.get(`/users/${gigData?.userId}`).then(res => res.data),\r\n    enabled: !!gigData?.userId\r\n  });\r\n\r\n  if (isLoadingGig || isLoadingUser) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"pay\">\r\n      <CheckoutForm gigData={gigData} userData={userData} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Pay;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}