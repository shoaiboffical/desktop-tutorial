{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.formatTransactionResponse = exports.formatTransactionReceipt = exports.formatReceiptLog = exports.formatBlock = exports.formatLog = exports.formatUint256 = exports.formatHash = exports.formatData = exports.formatBoolean = exports.object = exports.arrayOf = exports.allowNull = void 0;\n/**\n *  @_ignore\n */\nconst index_js_1 = require(\"../address/index.js\");\nconst index_js_2 = require(\"../crypto/index.js\");\nconst index_js_3 = require(\"../transaction/index.js\");\nconst index_js_4 = require(\"../utils/index.js\");\nconst BN_0 = BigInt(0);\nfunction allowNull(format, nullValue) {\n  return function (value) {\n    if (value == null) {\n      return nullValue;\n    }\n    return format(value);\n  };\n}\nexports.allowNull = allowNull;\nfunction arrayOf(format, allowNull) {\n  return array => {\n    if (allowNull && array == null) {\n      return null;\n    }\n    if (!Array.isArray(array)) {\n      throw new Error(\"not an array\");\n    }\n    return array.map(i => format(i));\n  };\n}\nexports.arrayOf = arrayOf;\n// Requires an object which matches a fleet of other formatters\n// Any FormatFunc may return `undefined` to have the value omitted\n// from the result object. Calls preserve `this`.\nfunction object(format, altNames) {\n  return value => {\n    const result = {};\n    for (const key in format) {\n      let srcKey = key;\n      if (altNames && key in altNames && !(srcKey in value)) {\n        for (const altKey of altNames[key]) {\n          if (altKey in value) {\n            srcKey = altKey;\n            break;\n          }\n        }\n      }\n      try {\n        const nv = format[key](value[srcKey]);\n        if (nv !== undefined) {\n          result[key] = nv;\n        }\n      } catch (error) {\n        const message = error instanceof Error ? error.message : \"not-an-error\";\n        (0, index_js_4.assert)(false, `invalid value for value.${key} (${message})`, \"BAD_DATA\", {\n          value\n        });\n      }\n    }\n    return result;\n  };\n}\nexports.object = object;\nfunction formatBoolean(value) {\n  switch (value) {\n    case true:\n    case \"true\":\n      return true;\n    case false:\n    case \"false\":\n      return false;\n  }\n  (0, index_js_4.assertArgument)(false, `invalid boolean; ${JSON.stringify(value)}`, \"value\", value);\n}\nexports.formatBoolean = formatBoolean;\nfunction formatData(value) {\n  (0, index_js_4.assertArgument)((0, index_js_4.isHexString)(value, true), \"invalid data\", \"value\", value);\n  return value;\n}\nexports.formatData = formatData;\nfunction formatHash(value) {\n  (0, index_js_4.assertArgument)((0, index_js_4.isHexString)(value, 32), \"invalid hash\", \"value\", value);\n  return value;\n}\nexports.formatHash = formatHash;\nfunction formatUint256(value) {\n  if (!(0, index_js_4.isHexString)(value)) {\n    throw new Error(\"invalid uint256\");\n  }\n  return (0, index_js_4.zeroPadValue)(value, 32);\n}\nexports.formatUint256 = formatUint256;\nconst _formatLog = object({\n  address: index_js_1.getAddress,\n  blockHash: formatHash,\n  blockNumber: index_js_4.getNumber,\n  data: formatData,\n  index: index_js_4.getNumber,\n  removed: allowNull(formatBoolean, false),\n  topics: arrayOf(formatHash),\n  transactionHash: formatHash,\n  transactionIndex: index_js_4.getNumber\n}, {\n  index: [\"logIndex\"]\n});\nfunction formatLog(value) {\n  return _formatLog(value);\n}\nexports.formatLog = formatLog;\nconst _formatBlock = object({\n  hash: allowNull(formatHash),\n  parentHash: formatHash,\n  parentBeaconBlockRoot: allowNull(formatHash, null),\n  number: index_js_4.getNumber,\n  timestamp: index_js_4.getNumber,\n  nonce: allowNull(formatData),\n  difficulty: index_js_4.getBigInt,\n  gasLimit: index_js_4.getBigInt,\n  gasUsed: index_js_4.getBigInt,\n  stateRoot: allowNull(formatHash, null),\n  receiptsRoot: allowNull(formatHash, null),\n  blobGasUsed: allowNull(index_js_4.getBigInt, null),\n  excessBlobGas: allowNull(index_js_4.getBigInt, null),\n  miner: allowNull(index_js_1.getAddress),\n  extraData: formatData,\n  baseFeePerGas: allowNull(index_js_4.getBigInt)\n});\nfunction formatBlock(value) {\n  const result = _formatBlock(value);\n  result.transactions = value.transactions.map(tx => {\n    if (typeof tx === \"string\") {\n      return tx;\n    }\n    return formatTransactionResponse(tx);\n  });\n  return result;\n}\nexports.formatBlock = formatBlock;\nconst _formatReceiptLog = object({\n  transactionIndex: index_js_4.getNumber,\n  blockNumber: index_js_4.getNumber,\n  transactionHash: formatHash,\n  address: index_js_1.getAddress,\n  topics: arrayOf(formatHash),\n  data: formatData,\n  index: index_js_4.getNumber,\n  blockHash: formatHash\n}, {\n  index: [\"logIndex\"]\n});\nfunction formatReceiptLog(value) {\n  return _formatReceiptLog(value);\n}\nexports.formatReceiptLog = formatReceiptLog;\nconst _formatTransactionReceipt = object({\n  to: allowNull(index_js_1.getAddress, null),\n  from: allowNull(index_js_1.getAddress, null),\n  contractAddress: allowNull(index_js_1.getAddress, null),\n  // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n  index: index_js_4.getNumber,\n  root: allowNull(index_js_4.hexlify),\n  gasUsed: index_js_4.getBigInt,\n  blobGasUsed: allowNull(index_js_4.getBigInt, null),\n  logsBloom: allowNull(formatData),\n  blockHash: formatHash,\n  hash: formatHash,\n  logs: arrayOf(formatReceiptLog),\n  blockNumber: index_js_4.getNumber,\n  //confirmations: allowNull(getNumber, null),\n  cumulativeGasUsed: index_js_4.getBigInt,\n  effectiveGasPrice: allowNull(index_js_4.getBigInt),\n  blobGasPrice: allowNull(index_js_4.getBigInt, null),\n  status: allowNull(index_js_4.getNumber),\n  type: allowNull(index_js_4.getNumber, 0)\n}, {\n  effectiveGasPrice: [\"gasPrice\"],\n  hash: [\"transactionHash\"],\n  index: [\"transactionIndex\"]\n});\nfunction formatTransactionReceipt(value) {\n  return _formatTransactionReceipt(value);\n}\nexports.formatTransactionReceipt = formatTransactionReceipt;\nfunction formatTransactionResponse(value) {\n  // Some clients (TestRPC) do strange things like return 0x0 for the\n  // 0 address; correct this to be a real address\n  if (value.to && (0, index_js_4.getBigInt)(value.to) === BN_0) {\n    value.to = \"0x0000000000000000000000000000000000000000\";\n  }\n  const result = object({\n    hash: formatHash,\n    // Some nodes do not return this, usually test nodes (like Ganache)\n    index: allowNull(index_js_4.getNumber, undefined),\n    type: value => {\n      if (value === \"0x\" || value == null) {\n        return 0;\n      }\n      return (0, index_js_4.getNumber)(value);\n    },\n    accessList: allowNull(index_js_3.accessListify, null),\n    blobVersionedHashes: allowNull(arrayOf(formatHash, true), null),\n    blockHash: allowNull(formatHash, null),\n    blockNumber: allowNull(index_js_4.getNumber, null),\n    transactionIndex: allowNull(index_js_4.getNumber, null),\n    from: index_js_1.getAddress,\n    // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas) must be set\n    gasPrice: allowNull(index_js_4.getBigInt),\n    maxPriorityFeePerGas: allowNull(index_js_4.getBigInt),\n    maxFeePerGas: allowNull(index_js_4.getBigInt),\n    maxFeePerBlobGas: allowNull(index_js_4.getBigInt, null),\n    gasLimit: index_js_4.getBigInt,\n    to: allowNull(index_js_1.getAddress, null),\n    value: index_js_4.getBigInt,\n    nonce: index_js_4.getNumber,\n    data: formatData,\n    creates: allowNull(index_js_1.getAddress, null),\n    chainId: allowNull(index_js_4.getBigInt, null)\n  }, {\n    data: [\"input\"],\n    gasLimit: [\"gas\"],\n    index: [\"transactionIndex\"]\n  })(value);\n  // If to and creates are empty, populate the creates from the value\n  if (result.to == null && result.creates == null) {\n    result.creates = (0, index_js_1.getCreateAddress)(result);\n  }\n  // @TODO: Check fee data\n  // Add an access list to supported transaction types\n  if ((value.type === 1 || value.type === 2) && value.accessList == null) {\n    result.accessList = [];\n  }\n  // Compute the signature\n  if (value.signature) {\n    result.signature = index_js_2.Signature.from(value.signature);\n  } else {\n    result.signature = index_js_2.Signature.from(value);\n  }\n  // Some backends omit ChainId on legacy transactions, but we can compute it\n  if (result.chainId == null) {\n    const chainId = result.signature.legacyChainId;\n    if (chainId != null) {\n      result.chainId = chainId;\n    }\n  }\n  // @TODO: check chainID\n  /*\n  if (value.chainId != null) {\n      let chainId = value.chainId;\n       if (isHexString(chainId)) {\n          chainId = BigNumber.from(chainId).toNumber();\n      }\n       result.chainId = chainId;\n   } else {\n      let chainId = value.networkId;\n       // geth-etc returns chainId\n      if (chainId == null && result.v == null) {\n          chainId = value.chainId;\n      }\n       if (isHexString(chainId)) {\n          chainId = BigNumber.from(chainId).toNumber();\n      }\n       if (typeof(chainId) !== \"number\" && result.v != null) {\n          chainId = (result.v - 35) / 2;\n          if (chainId < 0) { chainId = 0; }\n          chainId = parseInt(chainId);\n      }\n       if (typeof(chainId) !== \"number\") { chainId = 0; }\n       result.chainId = chainId;\n  }\n  */\n  // 0x0000... should actually be null\n  if (result.blockHash && (0, index_js_4.getBigInt)(result.blockHash) === BN_0) {\n    result.blockHash = null;\n  }\n  return result;\n}\nexports.formatTransactionResponse = formatTransactionResponse;","map":{"version":3,"names":["index_js_1","require","index_js_2","index_js_3","index_js_4","BN_0","BigInt","allowNull","format","nullValue","value","exports","arrayOf","array","Array","isArray","Error","map","i","object","altNames","result","key","srcKey","altKey","nv","undefined","error","message","assert","formatBoolean","assertArgument","JSON","stringify","formatData","isHexString","formatHash","formatUint256","zeroPadValue","_formatLog","address","getAddress","blockHash","blockNumber","getNumber","data","index","removed","topics","transactionHash","transactionIndex","formatLog","_formatBlock","hash","parentHash","parentBeaconBlockRoot","number","timestamp","nonce","difficulty","getBigInt","gasLimit","gasUsed","stateRoot","receiptsRoot","blobGasUsed","excessBlobGas","miner","extraData","baseFeePerGas","formatBlock","transactions","tx","formatTransactionResponse","_formatReceiptLog","formatReceiptLog","_formatTransactionReceipt","to","from","contractAddress","root","hexlify","logsBloom","logs","cumulativeGasUsed","effectiveGasPrice","blobGasPrice","status","type","formatTransactionReceipt","accessList","accessListify","blobVersionedHashes","gasPrice","maxPriorityFeePerGas","maxFeePerGas","maxFeePerBlobGas","creates","chainId","getCreateAddress","signature","Signature","legacyChainId"],"sources":["C:\\project\\fiverr-clone\\client\\node_modules\\ethers\\src.ts\\providers\\format.ts"],"sourcesContent":["/**\n *  @_ignore\n */\nimport { getAddress, getCreateAddress } from \"../address/index.js\";\nimport { Signature } from \"../crypto/index.js\"\nimport { accessListify } from \"../transaction/index.js\";\nimport {\n    getBigInt, getNumber, hexlify, isHexString, zeroPadValue,\n    assert, assertArgument\n} from \"../utils/index.js\";\n\nimport type {\n    BlockParams, LogParams,\n    TransactionReceiptParams, TransactionResponseParams,\n} from \"./formatting.js\";\n\n\nconst BN_0 = BigInt(0);\n\nexport type FormatFunc = (value: any) => any;\n\nexport function allowNull(format: FormatFunc, nullValue?: any): FormatFunc {\n    return (function(value: any) {\n        if (value == null) { return nullValue; }\n        return format(value);\n    });\n}\n\nexport function arrayOf(format: FormatFunc, allowNull?: boolean): FormatFunc {\n    return ((array: any) => {\n        if (allowNull && array == null) { return null; }\n        if (!Array.isArray(array)) { throw new Error(\"not an array\"); }\n        return array.map((i) => format(i));\n    });\n}\n\n// Requires an object which matches a fleet of other formatters\n// Any FormatFunc may return `undefined` to have the value omitted\n// from the result object. Calls preserve `this`.\nexport function object(format: Record<string, FormatFunc>, altNames?: Record<string, Array<string>>): FormatFunc {\n    return ((value: any) => {\n        const result: any = { };\n        for (const key in format) {\n            let srcKey = key;\n            if (altNames && key in altNames && !(srcKey in value)) {\n                for (const altKey of altNames[key]) {\n                    if (altKey in value) {\n                        srcKey = altKey;\n                        break;\n                    }\n                }\n            }\n\n            try {\n                const nv = format[key](value[srcKey]);\n                if (nv !== undefined) { result[key] = nv; }\n            } catch (error) {\n                const message = (error instanceof Error) ? error.message: \"not-an-error\";\n                assert(false, `invalid value for value.${ key } (${ message })`, \"BAD_DATA\", { value })\n            }\n        }\n        return result;\n    });\n}\n\nexport function formatBoolean(value: any): boolean {\n    switch (value) {\n        case true: case \"true\":\n            return true;\n        case false: case \"false\":\n            return false;\n    }\n    assertArgument(false, `invalid boolean; ${ JSON.stringify(value) }`, \"value\", value);\n}\n\nexport function formatData(value: string): string {\n    assertArgument(isHexString(value, true), \"invalid data\", \"value\", value);\n    return value;\n}\n\nexport function formatHash(value: any): string {\n    assertArgument(isHexString(value, 32), \"invalid hash\", \"value\", value);\n    return value;\n}\n\nexport function formatUint256(value: any): string {\n    if (!isHexString(value)) {\n        throw new Error(\"invalid uint256\");\n    }\n    return zeroPadValue(value, 32);\n}\n\nconst _formatLog = object({\n    address: getAddress,\n    blockHash: formatHash,\n    blockNumber: getNumber,\n    data: formatData,\n    index: getNumber,\n    removed: allowNull(formatBoolean, false),\n    topics: arrayOf(formatHash),\n    transactionHash: formatHash,\n    transactionIndex: getNumber,\n}, {\n    index: [ \"logIndex\" ]\n});\n\nexport function formatLog(value: any): LogParams {\n    return _formatLog(value);\n}\n\nconst _formatBlock = object({\n    hash: allowNull(formatHash),\n    parentHash: formatHash,\n    parentBeaconBlockRoot: allowNull(formatHash, null),\n\n    number: getNumber,\n\n    timestamp: getNumber,\n    nonce: allowNull(formatData),\n    difficulty: getBigInt,\n\n    gasLimit: getBigInt,\n    gasUsed: getBigInt,\n\n    stateRoot: allowNull(formatHash, null),\n    receiptsRoot: allowNull(formatHash, null),\n\n    blobGasUsed: allowNull(getBigInt, null),\n    excessBlobGas: allowNull(getBigInt, null),\n\n    miner: allowNull(getAddress),\n    extraData: formatData,\n\n    baseFeePerGas: allowNull(getBigInt)\n});\n\nexport function formatBlock(value: any): BlockParams {\n    const result = _formatBlock(value);\n    result.transactions = value.transactions.map((tx: string | TransactionResponseParams) => {\n        if (typeof(tx) === \"string\") { return tx; }\n        return formatTransactionResponse(tx);\n    });\n    return result;\n}\n\nconst _formatReceiptLog = object({\n    transactionIndex: getNumber,\n    blockNumber: getNumber,\n    transactionHash: formatHash,\n    address: getAddress,\n    topics: arrayOf(formatHash),\n    data: formatData,\n    index: getNumber,\n    blockHash: formatHash,\n}, {\n    index: [ \"logIndex\" ]\n});\n\nexport function formatReceiptLog(value: any): LogParams {\n    return _formatReceiptLog(value);\n}\n\nconst _formatTransactionReceipt = object({\n    to: allowNull(getAddress, null),\n    from: allowNull(getAddress, null),\n    contractAddress: allowNull(getAddress, null),\n    // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n    index: getNumber,\n    root: allowNull(hexlify),\n    gasUsed: getBigInt,\n    blobGasUsed: allowNull(getBigInt, null),\n    logsBloom: allowNull(formatData),\n    blockHash: formatHash,\n    hash: formatHash,\n    logs: arrayOf(formatReceiptLog),\n    blockNumber: getNumber,\n    //confirmations: allowNull(getNumber, null),\n    cumulativeGasUsed: getBigInt,\n    effectiveGasPrice: allowNull(getBigInt),\n    blobGasPrice: allowNull(getBigInt, null),\n    status: allowNull(getNumber),\n    type: allowNull(getNumber, 0)\n}, {\n    effectiveGasPrice: [ \"gasPrice\" ],\n    hash: [ \"transactionHash\" ],\n    index: [ \"transactionIndex\" ],\n});\n\nexport function formatTransactionReceipt(value: any): TransactionReceiptParams {\n    return _formatTransactionReceipt(value);\n}\n\nexport function formatTransactionResponse(value: any): TransactionResponseParams {\n\n    // Some clients (TestRPC) do strange things like return 0x0 for the\n    // 0 address; correct this to be a real address\n    if (value.to && getBigInt(value.to) === BN_0) {\n        value.to = \"0x0000000000000000000000000000000000000000\";\n    }\n\n    const result = object({\n        hash: formatHash,\n\n        // Some nodes do not return this, usually test nodes (like Ganache)\n        index: allowNull(getNumber, undefined),\n\n        type: (value: any) => {\n            if (value === \"0x\" || value == null) { return 0; }\n            return getNumber(value);\n        },\n        accessList: allowNull(accessListify, null),\n        blobVersionedHashes: allowNull(arrayOf(formatHash, true), null),\n\n        blockHash: allowNull(formatHash, null),\n        blockNumber: allowNull(getNumber, null),\n        transactionIndex: allowNull(getNumber, null),\n\n        from: getAddress,\n\n        // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas) must be set\n        gasPrice: allowNull(getBigInt),\n        maxPriorityFeePerGas: allowNull(getBigInt),\n        maxFeePerGas: allowNull(getBigInt),\n        maxFeePerBlobGas: allowNull(getBigInt, null),\n\n        gasLimit: getBigInt,\n        to: allowNull(getAddress, null),\n        value: getBigInt,\n        nonce: getNumber,\n        data: formatData,\n\n        creates: allowNull(getAddress, null),\n\n        chainId: allowNull(getBigInt, null)\n    }, {\n        data: [ \"input\" ],\n        gasLimit: [ \"gas\" ],\n        index: [ \"transactionIndex\" ]\n    })(value);\n\n    // If to and creates are empty, populate the creates from the value\n    if (result.to == null && result.creates == null) {\n        result.creates = getCreateAddress(result);\n    }\n\n    // @TODO: Check fee data\n\n    // Add an access list to supported transaction types\n    if ((value.type === 1 || value.type === 2) && value.accessList == null) {\n        result.accessList = [ ];\n    }\n\n    // Compute the signature\n    if (value.signature) {\n        result.signature = Signature.from(value.signature);\n    } else {\n        result.signature = Signature.from(value);\n    }\n\n    // Some backends omit ChainId on legacy transactions, but we can compute it\n    if (result.chainId == null) {\n        const chainId = result.signature.legacyChainId;\n        if (chainId != null) { result.chainId = chainId; }\n    }\n\n\n    // @TODO: check chainID\n    /*\n    if (value.chainId != null) {\n        let chainId = value.chainId;\n\n        if (isHexString(chainId)) {\n            chainId = BigNumber.from(chainId).toNumber();\n        }\n\n        result.chainId = chainId;\n\n    } else {\n        let chainId = value.networkId;\n\n        // geth-etc returns chainId\n        if (chainId == null && result.v == null) {\n            chainId = value.chainId;\n        }\n\n        if (isHexString(chainId)) {\n            chainId = BigNumber.from(chainId).toNumber();\n        }\n\n        if (typeof(chainId) !== \"number\" && result.v != null) {\n            chainId = (result.v - 35) / 2;\n            if (chainId < 0) { chainId = 0; }\n            chainId = parseInt(chainId);\n        }\n\n        if (typeof(chainId) !== \"number\") { chainId = 0; }\n\n        result.chainId = chainId;\n    }\n    */\n\n    // 0x0000... should actually be null\n    if (result.blockHash && getBigInt(result.blockHash) === BN_0) {\n        result.blockHash = null;\n    }\n\n    return result;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}