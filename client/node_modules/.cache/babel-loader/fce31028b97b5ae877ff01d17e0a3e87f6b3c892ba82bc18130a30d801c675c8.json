{"ast":null,"code":"var _jsxFileName = \"C:\\\\project\\\\fiverr-clone\\\\client\\\\src\\\\pages\\\\pay\\\\Pay.jsx\",\n  _s = $RefreshSig$();\n// // import React, { useEffect, useState } from \"react\";\n// import React from \"react\";\n// import \"./pay.scss\";\n// import {ethers} from 'ethers';\n\n// // imp//import { Elements } from \"@stripe/react-stripe-js\";\n// // import newRequest from \"../../utils/newRequest\";\n// // import { useParams } from \"react-router-dom\";\n//import CheckoutForm from \"../../components/checkOutForm/CheckOutForm\";\n\n// import { Slider } from \"infinite-react-carousel\";\n// import { useQuery } from \"@tanstack/react-query\";\n// import newRequest from \"../../utils/newRequest\";\n// import { Link, useParams } from \"react-router-dom\";\n// import Reviews from \"../../components/reviews/Reviews\";\n\n// const Pay = () => {\n\n//   const { id } = useParams();\n//   // console.log(id);\n//   const { data } = useQuery({\n//       queryKey: ['gig'],\n//       queryFn: () =>\n//           newRequest.get(`/gigs/single/${id}`)\n//               .then((res) => {\n//                   return res.data;\n//               })\n//   });\n//   const userId=data?.userId;\n//   const {  data: dataUser } = useQuery({\n//       queryKey: ['user'],\n//       queryFn: () =>\n//           newRequest.get(`/users/${userId}`)\n//               .then((res) => {\n//                   return res.data;    \n//               }),enabled:!!userId,\n//   });\n//   console.log(\"------------>>>>>>>>>>-------\");\n\n//    console.log(\"User's Wallet Address:\", dataUser?.username);\n//    console.log(\"User's Wallet Address:\", dataUser?.wallet_address);\n\n// console.log(\"Gig's Title:\", data?.price);\n\n// const requestAccounts = async () => {\n//   try {\n\n//     const accounts = await window.ethereum.request({\n//       method: 'eth_requestAccounts'\n//     });\n//     console.log(accounts); // Do something with the accounts\n\n//     // If you're sending a transaction, ensure this is in response to a user action\n\n//     const transactionParameters = {\n//       from: accounts,\n//       to: dataUser?.wallet_address,\n//       gas: \"0x76c0\", // 30400\n//       gasPrice: \"0x9184e72a000\", // 10000000000000\n//       value: data?.price, // 2441406250\n//       data: \"0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675\",\n//     };\n\n//     const txHash = await window.ethereum.request({\n//       method: 'eth_sendTransaction',\n//       params: [transactionParameters],\n//     });\n//     console.log(txHash); // Use the transaction hash as needed\n\n//   } catch (error) {\n//     console.error(error);\n//   }\n// };\n\n// requestAccounts();\n//   return <div className=\"pay\">\n//     {/* {clientSecret && (\n//         <Elements options={options} stripe={stripePromise}>\n//           <CheckoutForm />\n//         </Elements>\n//       )} */}\n\n//   </div>;\n// };\n\n// export default Pay;\n\n// import React, { useEffect } from \"react\";\n// import \"./pay.scss\";\n// import { useQuery } from \"@tanstack/react-query\";\n// import newRequest from \"../../utils/newRequest\";\n// import { useParams } from \"react-router-dom\";\n// import Reviews from \"../../components/reviews/Reviews\";\n// import {ethers} from 'ethers';\n\n// const Pay = () => {\n//   const { id } = useParams();\n\n//   c\n\n// //   const userId = gigData?.userId;\n\n//   useEffect(() => {\n\n//     // Call requestAccounts if both gigData and userData are loaded\n//     if (gigData && userData) {\n//       requestAccounts();\n//     }\n//   }, [gigData, userData]); // useEffect will run when gigData and userData change\n\n//   return (\n//     <div className=\"pay\">\n//       {/* UI elements */}\n//              <Reviews gigId={id} key={id}></Reviews>\n//     </div>\n//   );\n// };\n\n// export default Pay;\n// import React, { useEffect,useState } from \"react\";\n// import { useParams, useNavigate } from \"react-router-dom\";\n// import { useQuery } from \"@tanstack/react-query\";\n// import { ethers } from 'ethers'\n// import newRequest from \"../../utils/newRequest\";\n// import CheckoutForm from \"../../components/checkOutForm/CheckOutForm\";\n// import Reviews from \"../../components/reviews/Reviews\";\n// import \"./pay.scss\";\n// import axios from 'axios';\n\n// const Pay = () => {\n//   const [clientSecret, setClientSecret] = useState(\"\");\n\n//   const { id } = useParams();\n//   const { data: gigData } = useQuery({\n//     queryKey: ['gig'],\n//     queryFn: () => newRequest.get(`/gigs/single/${id}`).then(res => res.data)\n// });\n//   const userId = gigData?.userId;\n//   const { data: userData } = useQuery({\n//     queryKey: ['user'],\n//     queryFn: () => newRequest.get(`/users/${userId}`).then(res => res.data),    \n//     enabled: !!userId,\n// });\n\n//   useEffect(() => {\n//     const requestAccounts = async () => {\n//       if (!window.ethereum) {\n//         console.error(\"Ethereum object not found. You need to install MetaMask or another Ethereum wallet.\");\n//         return;\n//       }\n\n//       try {\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n//         console.log(\"Connected accounts:\", accounts);\n\n//         // Define the transaction parameters\n//         const transactionParameters = {\n//           from: accounts[0], // Use the first account\n//           to: userData?.wallet_address,\n//           gas: \"0x5208\", // Set to 21000, which is the basic transaction cost\n//           gasPrice: \"0x3B9ACA00\", // Adjusted to a lower typical value, e.g., 1 Gwei\n//           value: ethers.utils.parseUnits(gigData?.price.toString() || \"0\", \"ether\").toHexString(),\n\n//         };\n\n//         // Send the transaction\n//         const txHash = await window.ethereum.request({\n//           method: 'eth_sendTransaction',\n//           params: [transactionParameters],\n//         });\n//         console.log(\"Transaction hash:\", txHash);\n\n//       } catch (error) {\n//         console.error(\"Error requesting accounts or sending transaction:\", error);\n//       }\n//     };\n//   }, [gigData, userData]);\n\n//     const makeRequest = async () => {\n//       if (!clientSecret && id) {  // Only run if clientSecret is not already set and id is present\n//         try {\n//           const res = await newRequest.post(\n//             `/orders/create-payment-intent/${id}`\n//           );\n//           setClientSecret(res.data.clientSecret);\n//         } catch (err) {\n//           console.log(err);\n//         }\n//     };\n//     makeRequest();\n//   },[id]);\n\n//   return (\n//     <div className=\"pay\">\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { ethers } from 'ethers';\nimport newRequest from \"../../utils/newRequest\";\nimport Reviews from \"../../components/reviews/Reviews\";\nimport \"./pay.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Pay = () => {\n  _s();\n  const [clientSecret, setClientSecret] = useState(\"\");\n  const hasExecuted = useRef(false); // To ensure MetaMask and data saving occur only once\n  const isMounted = useRef(true); // To track if component is still mounted\n  const {\n    id\n  } = useParams();\n  const {\n    data: gigData,\n    isSuccess: gigDataLoaded\n  } = useQuery({\n    queryKey: ['gig'],\n    queryFn: () => newRequest.get(`/gigs/single/${id}`).then(res => res.data)\n  });\n  const {\n    data: userData,\n    isSuccess: userDataLoaded\n  } = useQuery({\n    queryKey: ['user'],\n    queryFn: () => newRequest.get(`/users/${gigData === null || gigData === void 0 ? void 0 : gigData.userId}`).then(res => res.data),\n    enabled: !!(gigData !== null && gigData !== void 0 && gigData.userId)\n  });\n  useEffect(() => {\n    return () => {\n      isMounted.current = false; // Clean up on unmount\n    };\n  }, []);\n  useEffect(() => {\n    const initiateTransaction = async () => {\n      if (!window.ethereum) {\n        console.error(\"Ethereum object not found. You need to install MetaMask.\");\n        return;\n      }\n      try {\n        if (!hasExecuted.current) {\n          hasExecuted.current = true; // Prevent further execution\n          const accounts = await window.ethereum.request({\n            method: 'eth_requestAccounts'\n          });\n          console.log(\"Connected accounts:\", accounts);\n          const transactionParameters = {\n            from: accounts[0],\n            to: userData === null || userData === void 0 ? void 0 : userData.wallet_address,\n            gas: \"0x5208\",\n            // 21000 GWEI\n            gasPrice: \"0x3B9ACA00\",\n            // 1 GWEI\n            value: ethers.utils.parseUnits((gigData === null || gigData === void 0 ? void 0 : gigData.price.toString()) || \"0\", \"ether\").toHexString()\n          };\n          const txHash = await window.ethereum.request({\n            method: 'eth_sendTransaction',\n            params: [transactionParameters]\n          });\n          console.log(\"Transaction hash:\", txHash);\n          if (isMounted.current) {\n            makePaymentIntent();\n          }\n        }\n      } catch (error) {\n        console.error(\"Error in transaction:\", error);\n      }\n    };\n    const makePaymentIntent = async () => {\n      try {\n        const res = await newRequest.post(`/orders/create-payment-intent/${id}`);\n        if (isMounted.current) {\n          setClientSecret(res.data.clientSecret);\n        }\n      } catch (err) {\n        console.error(\"Error creating payment intent:\", err);\n      }\n    };\n    if (gigDataLoaded && userDataLoaded && !clientSecret) {\n      initiateTransaction();\n    }\n  }, [gigDataLoaded, userDataLoaded, gigData, userData, id, clientSecret]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pay\",\n    children: /*#__PURE__*/_jsxDEV(Reviews, {\n      gigId: id\n    }, id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 291,\n    columnNumber: 5\n  }, this);\n};\n_s(Pay, \"rxR8oOsWKjWexZztCGUbZ7Y96Ag=\", false, function () {\n  return [useParams, useQuery, useQuery];\n});\n_c = Pay;\nexport default Pay;\n\n//       <Reviews gigId={id} key={id} />\n//     </div>\n//   );\n// };\n\n// export default Pay;\nvar _c;\n$RefreshReg$(_c, \"Pay\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useParams","useQuery","ethers","newRequest","Reviews","jsxDEV","_jsxDEV","Pay","_s","clientSecret","setClientSecret","hasExecuted","isMounted","id","data","gigData","isSuccess","gigDataLoaded","queryKey","queryFn","get","then","res","userData","userDataLoaded","userId","enabled","current","initiateTransaction","window","ethereum","console","error","accounts","request","method","log","transactionParameters","from","to","wallet_address","gas","gasPrice","value","utils","parseUnits","price","toString","toHexString","txHash","params","makePaymentIntent","post","err","className","children","gigId","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/project/fiverr-clone/client/src/pages/pay/Pay.jsx"],"sourcesContent":["// // import React, { useEffect, useState } from \"react\";\r\n// import React from \"react\";\r\n// import \"./pay.scss\";\r\n// import {ethers} from 'ethers';\r\n\r\n// // imp//import { Elements } from \"@stripe/react-stripe-js\";\r\n// // import newRequest from \"../../utils/newRequest\";\r\n// // import { useParams } from \"react-router-dom\";\r\n //import CheckoutForm from \"../../components/checkOutForm/CheckOutForm\";\r\n\r\n// import { Slider } from \"infinite-react-carousel\";\r\n// import { useQuery } from \"@tanstack/react-query\";\r\n// import newRequest from \"../../utils/newRequest\";\r\n// import { Link, useParams } from \"react-router-dom\";\r\n// import Reviews from \"../../components/reviews/Reviews\";\r\n\r\n\r\n// const Pay = () => {\r\n\r\n//   const { id } = useParams();\r\n//   // console.log(id);\r\n//   const { data } = useQuery({\r\n//       queryKey: ['gig'],\r\n//       queryFn: () =>\r\n//           newRequest.get(`/gigs/single/${id}`)\r\n//               .then((res) => {\r\n//                   return res.data;\r\n//               })\r\n//   });\r\n//   const userId=data?.userId;\r\n//   const {  data: dataUser } = useQuery({\r\n//       queryKey: ['user'],\r\n//       queryFn: () =>\r\n//           newRequest.get(`/users/${userId}`)\r\n//               .then((res) => {\r\n//                   return res.data;    \r\n//               }),enabled:!!userId,\r\n//   });\r\n//   console.log(\"------------>>>>>>>>>>-------\");\r\n   \r\n//    console.log(\"User's Wallet Address:\", dataUser?.username);\r\n//    console.log(\"User's Wallet Address:\", dataUser?.wallet_address);\r\n\r\n// console.log(\"Gig's Title:\", data?.price);\r\n\r\n// const requestAccounts = async () => {\r\n//   try {\r\n   \r\n//     const accounts = await window.ethereum.request({\r\n//       method: 'eth_requestAccounts'\r\n//     });\r\n//     console.log(accounts); // Do something with the accounts\r\n\r\n//     // If you're sending a transaction, ensure this is in response to a user action\r\n    \r\n//     const transactionParameters = {\r\n//       from: accounts,\r\n//       to: dataUser?.wallet_address,\r\n//       gas: \"0x76c0\", // 30400\r\n//       gasPrice: \"0x9184e72a000\", // 10000000000000\r\n//       value: data?.price, // 2441406250\r\n//       data: \"0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675\",\r\n//     };\r\n\r\n//     const txHash = await window.ethereum.request({\r\n//       method: 'eth_sendTransaction',\r\n//       params: [transactionParameters],\r\n//     });\r\n//     console.log(txHash); // Use the transaction hash as needed\r\n   \r\n//   } catch (error) {\r\n//     console.error(error);\r\n//   }\r\n// };\r\n\r\n// requestAccounts();\r\n//   return <div className=\"pay\">\r\n//     {/* {clientSecret && (\r\n//         <Elements options={options} stripe={stripePromise}>\r\n//           <CheckoutForm />\r\n//         </Elements>\r\n//       )} */}\r\n \r\n  \r\n    \r\n      \r\n//   </div>;\r\n// };\r\n\r\n// export default Pay;\r\n\r\n\r\n\r\n// import React, { useEffect } from \"react\";\r\n// import \"./pay.scss\";\r\n// import { useQuery } from \"@tanstack/react-query\";\r\n// import newRequest from \"../../utils/newRequest\";\r\n// import { useParams } from \"react-router-dom\";\r\n// import Reviews from \"../../components/reviews/Reviews\";\r\n// import {ethers} from 'ethers';\r\n\r\n// const Pay = () => {\r\n//   const { id } = useParams();\r\n\r\n//   c\r\n\r\n// //   const userId = gigData?.userId;\r\n\r\n\r\n\r\n//   useEffect(() => {\r\n   \r\n\r\n//     // Call requestAccounts if both gigData and userData are loaded\r\n//     if (gigData && userData) {\r\n//       requestAccounts();\r\n//     }\r\n//   }, [gigData, userData]); // useEffect will run when gigData and userData change\r\n\r\n//   return (\r\n//     <div className=\"pay\">\r\n//       {/* UI elements */}\r\n//              <Reviews gigId={id} key={id}></Reviews>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Pay;\r\n// import React, { useEffect,useState } from \"react\";\r\n// import { useParams, useNavigate } from \"react-router-dom\";\r\n// import { useQuery } from \"@tanstack/react-query\";\r\n// import { ethers } from 'ethers'\r\n// import newRequest from \"../../utils/newRequest\";\r\n// import CheckoutForm from \"../../components/checkOutForm/CheckOutForm\";\r\n// import Reviews from \"../../components/reviews/Reviews\";\r\n// import \"./pay.scss\";\r\n// import axios from 'axios';\r\n\r\n// const Pay = () => {\r\n//   const [clientSecret, setClientSecret] = useState(\"\");\r\n\r\n//   const { id } = useParams();\r\n//   const { data: gigData } = useQuery({\r\n//     queryKey: ['gig'],\r\n//     queryFn: () => newRequest.get(`/gigs/single/${id}`).then(res => res.data)\r\n// });\r\n//   const userId = gigData?.userId;\r\n//   const { data: userData } = useQuery({\r\n//     queryKey: ['user'],\r\n//     queryFn: () => newRequest.get(`/users/${userId}`).then(res => res.data),    \r\n//     enabled: !!userId,\r\n// });\r\n\r\n//   useEffect(() => {\r\n//     const requestAccounts = async () => {\r\n//       if (!window.ethereum) {\r\n//         console.error(\"Ethereum object not found. You need to install MetaMask or another Ethereum wallet.\");\r\n//         return;\r\n//       }\r\n\r\n//       try {\r\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n//         console.log(\"Connected accounts:\", accounts);\r\n\r\n//         // Define the transaction parameters\r\n//         const transactionParameters = {\r\n//           from: accounts[0], // Use the first account\r\n//           to: userData?.wallet_address,\r\n//           gas: \"0x5208\", // Set to 21000, which is the basic transaction cost\r\n//           gasPrice: \"0x3B9ACA00\", // Adjusted to a lower typical value, e.g., 1 Gwei\r\n//           value: ethers.utils.parseUnits(gigData?.price.toString() || \"0\", \"ether\").toHexString(),\r\n        \r\n//         };\r\n\r\n//         // Send the transaction\r\n//         const txHash = await window.ethereum.request({\r\n//           method: 'eth_sendTransaction',\r\n//           params: [transactionParameters],\r\n//         });\r\n//         console.log(\"Transaction hash:\", txHash);\r\n\r\n//       } catch (error) {\r\n//         console.error(\"Error requesting accounts or sending transaction:\", error);\r\n//       }\r\n//     };\r\n//   }, [gigData, userData]);\r\n   \r\n   \r\n//     const makeRequest = async () => {\r\n//       if (!clientSecret && id) {  // Only run if clientSecret is not already set and id is present\r\n//         try {\r\n//           const res = await newRequest.post(\r\n//             `/orders/create-payment-intent/${id}`\r\n//           );\r\n//           setClientSecret(res.data.clientSecret);\r\n//         } catch (err) {\r\n//           console.log(err);\r\n//         }\r\n//     };\r\n//     makeRequest();\r\n//   },[id]);\r\n\r\n\r\n\r\n//   return (\r\n//     <div className=\"pay\">\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useQuery } from \"@tanstack/react-query\";\r\nimport { ethers } from 'ethers';\r\nimport newRequest from \"../../utils/newRequest\";\r\nimport Reviews from \"../../components/reviews/Reviews\";\r\nimport \"./pay.scss\";\r\n\r\nconst Pay = () => {\r\n  const [clientSecret, setClientSecret] = useState(\"\");\r\n  const hasExecuted = useRef(false);  // To ensure MetaMask and data saving occur only once\r\n  const isMounted = useRef(true);  // To track if component is still mounted\r\n  const { id } = useParams();\r\n\r\n  const { data: gigData, isSuccess: gigDataLoaded } = useQuery({\r\n    queryKey: ['gig'],\r\n    queryFn: () => newRequest.get(`/gigs/single/${id}`).then(res => res.data)\r\n  });\r\n\r\n  const { data: userData, isSuccess: userDataLoaded } = useQuery({\r\n    queryKey: ['user'],\r\n    queryFn: () => newRequest.get(`/users/${gigData?.userId}`).then(res => res.data),    \r\n    enabled: !!gigData?.userId,\r\n  });\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      isMounted.current = false;  // Clean up on unmount\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const initiateTransaction = async () => {\r\n      if (!window.ethereum) {\r\n        console.error(\"Ethereum object not found. You need to install MetaMask.\");\r\n        return;\r\n      }\r\n\r\n      try {\r\n        if (!hasExecuted.current) {\r\n          hasExecuted.current = true;  // Prevent further execution\r\n          const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n          console.log(\"Connected accounts:\", accounts);\r\n\r\n          const transactionParameters = {\r\n            from: accounts[0],\r\n            to: userData?.wallet_address,\r\n            gas: \"0x5208\", // 21000 GWEI\r\n            gasPrice: \"0x3B9ACA00\", // 1 GWEI\r\n            value: ethers.utils.parseUnits(gigData?.price.toString() || \"0\", \"ether\").toHexString(),\r\n          };\r\n\r\n          const txHash = await window.ethereum.request({\r\n            method: 'eth_sendTransaction',\r\n            params: [transactionParameters],\r\n          });\r\n          console.log(\"Transaction hash:\", txHash);\r\n\r\n          if (isMounted.current) {\r\n            makePaymentIntent();\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error in transaction:\", error);\r\n      }\r\n    };\r\n\r\n    const makePaymentIntent = async () => {\r\n      try {\r\n        const res = await newRequest.post(`/orders/create-payment-intent/${id}`);\r\n        if (isMounted.current) {\r\n          setClientSecret(res.data.clientSecret);\r\n        }\r\n      } catch (err) {\r\n        console.error(\"Error creating payment intent:\", err);\r\n      }\r\n    };\r\n\r\n    if (gigDataLoaded && userDataLoaded && !clientSecret) {\r\n      initiateTransaction();\r\n    }\r\n  }, [gigDataLoaded, userDataLoaded, gigData, userData, id, clientSecret]);\r\n\r\n  return (\r\n    <div className=\"pay\">\r\n      <Reviews gigId={id} key={id} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Pay;\r\n\r\n//       <Reviews gigId={id} key={id} />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Pay;\r\n\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACC;;AAED;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAIA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,QAAQ,QAAQ,uBAAuB;AAChD,SAASC,MAAM,QAAQ,QAAQ;AAC/B,OAAOC,UAAU,MAAM,wBAAwB;AAC/C,OAAOC,OAAO,MAAM,kCAAkC;AACtD,OAAO,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpB,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACpD,M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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}