{"ast":null,"code":"var _jsxFileName = \"C:\\\\project\\\\fiverr-clone\\\\client\\\\src\\\\pages\\\\pay\\\\Pay.jsx\",\n  _s = $RefreshSig$();\n// // import React, { useEffect, useState } from \"react\";\n// import React from \"react\";\n// import \"./pay.scss\";\n// import {ethers} from 'ethers';\n\n// // imp//import { Elements } from \"@stripe/react-stripe-js\";\n// // import newRequest from \"../../utils/newRequest\";\n// // import { useParams } from \"react-router-dom\";\n//import CheckoutForm from \"../../components/checkOutForm/CheckOutForm\";\n\n// import { Slider } from \"infinite-react-carousel\";\n// import { useQuery } from \"@tanstack/react-query\";\n// import newRequest from \"../../utils/newRequest\";\n// import { Link, useParams } from \"react-router-dom\";\n// import Reviews from \"../../components/reviews/Reviews\";\n\n// const Pay = () => {\n\n//   const { id } = useParams();\n//   // console.log(id);\n//   const { data } = useQuery({\n//       queryKey: ['gig'],\n//       queryFn: () =>\n//           newRequest.get(`/gigs/single/${id}`)\n//               .then((res) => {\n//                   return res.data;\n//               })\n//   });\n//   const userId=data?.userId;\n//   const {  data: dataUser } = useQuery({\n//       queryKey: ['user'],\n//       queryFn: () =>\n//           newRequest.get(`/users/${userId}`)\n//               .then((res) => {\n//                   return res.data;    \n//               }),enabled:!!userId,\n//   });\n//   console.log(\"------------>>>>>>>>>>-------\");\n\n//    console.log(\"User's Wallet Address:\", dataUser?.username);\n//    console.log(\"User's Wallet Address:\", dataUser?.wallet_address);\n\n// console.log(\"Gig's Title:\", data?.price);\n\n// const requestAccounts = async () => {\n//   try {\n\n//     const accounts = await window.ethereum.request({\n//       method: 'eth_requestAccounts'\n//     });\n//     console.log(accounts); // Do something with the accounts\n\n//     // If you're sending a transaction, ensure this is in response to a user action\n\n//     const transactionParameters = {\n//       from: accounts,\n//       to: dataUser?.wallet_address,\n//       gas: \"0x76c0\", // 30400\n//       gasPrice: \"0x9184e72a000\", // 10000000000000\n//       value: data?.price, // 2441406250\n//       data: \"0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675\",\n//     };\n\n//     const txHash = await window.ethereum.request({\n//       method: 'eth_sendTransaction',\n//       params: [transactionParameters],\n//     });\n//     console.log(txHash); // Use the transaction hash as needed\n\n//   } catch (error) {\n//     console.error(error);\n//   }\n// };\n\n// requestAccounts();\n//   return <div className=\"pay\">\n//     {/* {clientSecret && (\n//         <Elements options={options} stripe={stripePromise}>\n//           <CheckoutForm />\n//         </Elements>\n//       )} */}\n\n//   </div>;\n// };\n\n// export default Pay;\n\n// import React, { useEffect } from \"react\";\n// import \"./pay.scss\";\n// import { useQuery } from \"@tanstack/react-query\";\n// import newRequest from \"../../utils/newRequest\";\n// import { useParams } from \"react-router-dom\";\n// import Reviews from \"../../components/reviews/Reviews\";\n// import {ethers} from 'ethers';\n\n// const Pay = () => {\n//   const { id } = useParams();\n\n//   c\n\n// //   const userId = gigData?.userId;\n\n//   useEffect(() => {\n\n//     // Call requestAccounts if both gigData and userData are loaded\n//     if (gigData && userData) {\n//       requestAccounts();\n//     }\n//   }, [gigData, userData]); // useEffect will run when gigData and userData change\n\n//   return (\n//     <div className=\"pay\">\n//       {/* UI elements */}\n//              <Reviews gigId={id} key={id}></Reviews>\n//     </div>\n//   );\n// };\n\n// export default Pay;\n// import React, { useEffect,useState } from \"react\";\n// import { useParams, useNavigate } from \"react-router-dom\";\n// import { useQuery } from \"@tanstack/react-query\";\n// import { ethers } from 'ethers'\n// import newRequest from \"../../utils/newRequest\";\n// import CheckoutForm from \"../../components/checkOutForm/CheckOutForm\";\n// import Reviews from \"../../components/reviews/Reviews\";\n// import \"./pay.scss\";\n// import axios from 'axios';\n\n// const Pay = () => {\n//   const [clientSecret, setClientSecret] = useState(\"\");\n\n//   const { id } = useParams();\n//   const { data: gigData } = useQuery({\n//     queryKey: ['gig'],\n//     queryFn: () => newRequest.get(`/gigs/single/${id}`).then(res => res.data)\n// });\n//   const userId = gigData?.userId;\n//   const { data: userData } = useQuery({\n//     queryKey: ['user'],\n//     queryFn: () => newRequest.get(`/users/${userId}`).then(res => res.data),    \n//     enabled: !!userId,\n// });\n\n//   useEffect(() => {\n//     const requestAccounts = async () => {\n//       if (!window.ethereum) {\n//         console.error(\"Ethereum object not found. You need to install MetaMask or another Ethereum wallet.\");\n//         return;\n//       }\n\n//       try {\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n//         console.log(\"Connected accounts:\", accounts);\n\n//         // Define the transaction parameters\n//         const transactionParameters = {\n//           from: accounts[0], // Use the first account\n//           to: userData?.wallet_address,\n//           gas: \"0x5208\", // Set to 21000, which is the basic transaction cost\n//           gasPrice: \"0x3B9ACA00\", // Adjusted to a lower typical value, e.g., 1 Gwei\n//           value: ethers.utils.parseUnits(gigData?.price.toString() || \"0\", \"ether\").toHexString(),\n\n//         };\n\n//         // Send the transaction\n//         const txHash = await window.ethereum.request({\n//           method: 'eth_sendTransaction',\n//           params: [transactionParameters],\n//         });\n//         console.log(\"Transaction hash:\", txHash);\n\n//       } catch (error) {\n//         console.error(\"Error requesting accounts or sending transaction:\", error);\n//       }\n//     };\n//   }, [gigData, userData]);\n\n//     const makeRequest = async () => {\n//       if (!clientSecret && id) {  // Only run if clientSecret is not already set and id is present\n//         try {\n//           const res = await newRequest.post(\n//             `/orders/create-payment-intent/${id}`\n//           );\n//           setClientSecret(res.data.clientSecret);\n//         } catch (err) {\n//           console.log(err);\n//         }\n//     };\n//     makeRequest();\n//   },[id]);\n\n//   return (\n//     <div className=\"pay\">\n\n//       <Reviews gigId={id} key={id} />\n//     </div>\n//   );\n// };\n\n// export default Pay;\n\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { ethers } from 'ethers';\nimport newRequest from \"../../utils/newRequest\";\nimport Reviews from \"../../components/reviews/Reviews\";\nimport \"./pay.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Pay = () => {\n  _s();\n  const [clientSecret, setClientSecret] = useState(\"\");\n  const {\n    id\n  } = useParams();\n\n  // Fetch gig data\n  const {\n    data: gigData\n  } = useQuery({\n    queryKey: ['gig'],\n    queryFn: () => newRequest.get(`/gigs/single/${id}`).then(res => res.data)\n  });\n\n  // Fetch user data once gig data is available and contains userId\n  const {\n    data: userData\n  } = useQuery({\n    queryKey: ['user'],\n    queryFn: () => newRequest.get(`/users/${gigData === null || gigData === void 0 ? void 0 : gigData.userId}`).then(res => res.data),\n    enabled: !!(gigData !== null && gigData !== void 0 && gigData.userId)\n  });\n\n  // Single useEffect to handle all related actions\n  useEffect(() => {\n    // Function to request wallet accounts from MetaMask\n    const requestAccounts = async () => {\n      if (!window.ethereum) {\n        console.error(\"Ethereum object not found. You need to install MetaMask or another Ethereum wallet.\");\n        return;\n      }\n      try {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        console.log(\"Connected accounts:\", accounts);\n\n        // Define the transaction parameters\n        const transactionParameters = {\n          from: accounts[0],\n          // Use the first account\n          to: userData === null || userData === void 0 ? void 0 : userData.wallet_address,\n          gas: \"0x5208\",\n          // Set to 21000, which is the basic transaction cost\n          gasPrice: \"0x3B9ACA00\",\n          // Adjusted to a lower typical value, e.g., 1 Gwei\n          value: ethers.utils.parseUnits((gigData === null || gigData === void 0 ? void 0 : gigData.price.toString()) || \"0\", \"ether\").toHexString()\n        };\n\n        // Send the transaction\n        const txHash = await window.ethereum.request({\n          method: 'eth_sendTransaction',\n          params: [transactionParameters]\n        });\n        console.log(\"Transaction hash:\", txHash);\n      } catch (error) {\n        console.error(\"Error requesting accounts or sending transaction:\", error);\n      }\n    };\n\n    // Function to create payment intent\n    const makeRequest = async () => {\n      if (!clientSecret && id) {\n        // Only run if clientSecret is not already set and id is present\n        try {\n          const res = await newRequest.post(`/orders/create-payment-intent/${id}`);\n          setClientSecret(res.data.clientSecret);\n        } catch (err) {\n          console.error(err);\n        }\n      }\n    };\n    if (gigData && userData && !clientSecret) {\n      // Only execute if all required data is loaded and no clientSecret is set\n      requestAccounts();\n      makeRequest();\n    }\n  }, [gigData, userData, clientSecret, id]); // Include all dependencies that could affect the effect execution\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pay\",\n    children: /*#__PURE__*/_jsxDEV(Reviews, {\n      gigId: id\n    }, id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 292,\n    columnNumber: 5\n  }, this);\n};\n_s(Pay, \"+yW/U9IRUoXSy4RKi8tlIa3JT5E=\", false, function () {\n  return [useParams, useQuery, useQuery];\n});\n_c = Pay;\nexport default Pay;\nvar _c;\n$RefreshReg$(_c, \"Pay\");","map":{"version":3,"names":["React","useEffect","useState","useParams","useQuery","ethers","newRequest","Reviews","jsxDEV","_jsxDEV","Pay","_s","clientSecret","setClientSecret","id","data","gigData","queryKey","queryFn","get","then","res","userData","userId","enabled","requestAccounts","window","ethereum","console","error","accounts","request","method","log","transactionParameters","from","to","wallet_address","gas","gasPrice","value","utils","parseUnits","price","toString","toHexString","txHash","params","makeRequest","post","err","className","children","gigId","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/project/fiverr-clone/client/src/pages/pay/Pay.jsx"],"sourcesContent":["// // import React, { useEffect, useState } from \"react\";\r\n// import React from \"react\";\r\n// import \"./pay.scss\";\r\n// import {ethers} from 'ethers';\r\n\r\n// // imp//import { Elements } from \"@stripe/react-stripe-js\";\r\n// // import newRequest from \"../../utils/newRequest\";\r\n// // import { useParams } from \"react-router-dom\";\r\n //import CheckoutForm from \"../../components/checkOutForm/CheckOutForm\";\r\n\r\n// import { Slider } from \"infinite-react-carousel\";\r\n// import { useQuery } from \"@tanstack/react-query\";\r\n// import newRequest from \"../../utils/newRequest\";\r\n// import { Link, useParams } from \"react-router-dom\";\r\n// import Reviews from \"../../components/reviews/Reviews\";\r\n\r\n\r\n// const Pay = () => {\r\n\r\n//   const { id } = useParams();\r\n//   // console.log(id);\r\n//   const { data } = useQuery({\r\n//       queryKey: ['gig'],\r\n//       queryFn: () =>\r\n//           newRequest.get(`/gigs/single/${id}`)\r\n//               .then((res) => {\r\n//                   return res.data;\r\n//               })\r\n//   });\r\n//   const userId=data?.userId;\r\n//   const {  data: dataUser } = useQuery({\r\n//       queryKey: ['user'],\r\n//       queryFn: () =>\r\n//           newRequest.get(`/users/${userId}`)\r\n//               .then((res) => {\r\n//                   return res.data;    \r\n//               }),enabled:!!userId,\r\n//   });\r\n//   console.log(\"------------>>>>>>>>>>-------\");\r\n   \r\n//    console.log(\"User's Wallet Address:\", dataUser?.username);\r\n//    console.log(\"User's Wallet Address:\", dataUser?.wallet_address);\r\n\r\n// console.log(\"Gig's Title:\", data?.price);\r\n\r\n// const requestAccounts = async () => {\r\n//   try {\r\n   \r\n//     const accounts = await window.ethereum.request({\r\n//       method: 'eth_requestAccounts'\r\n//     });\r\n//     console.log(accounts); // Do something with the accounts\r\n\r\n//     // If you're sending a transaction, ensure this is in response to a user action\r\n    \r\n//     const transactionParameters = {\r\n//       from: accounts,\r\n//       to: dataUser?.wallet_address,\r\n//       gas: \"0x76c0\", // 30400\r\n//       gasPrice: \"0x9184e72a000\", // 10000000000000\r\n//       value: data?.price, // 2441406250\r\n//       data: \"0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675\",\r\n//     };\r\n\r\n//     const txHash = await window.ethereum.request({\r\n//       method: 'eth_sendTransaction',\r\n//       params: [transactionParameters],\r\n//     });\r\n//     console.log(txHash); // Use the transaction hash as needed\r\n   \r\n//   } catch (error) {\r\n//     console.error(error);\r\n//   }\r\n// };\r\n\r\n// requestAccounts();\r\n//   return <div className=\"pay\">\r\n//     {/* {clientSecret && (\r\n//         <Elements options={options} stripe={stripePromise}>\r\n//           <CheckoutForm />\r\n//         </Elements>\r\n//       )} */}\r\n \r\n  \r\n    \r\n      \r\n//   </div>;\r\n// };\r\n\r\n// export default Pay;\r\n\r\n\r\n\r\n// import React, { useEffect } from \"react\";\r\n// import \"./pay.scss\";\r\n// import { useQuery } from \"@tanstack/react-query\";\r\n// import newRequest from \"../../utils/newRequest\";\r\n// import { useParams } from \"react-router-dom\";\r\n// import Reviews from \"../../components/reviews/Reviews\";\r\n// import {ethers} from 'ethers';\r\n\r\n// const Pay = () => {\r\n//   const { id } = useParams();\r\n\r\n//   c\r\n\r\n// //   const userId = gigData?.userId;\r\n\r\n\r\n\r\n//   useEffect(() => {\r\n   \r\n\r\n//     // Call requestAccounts if both gigData and userData are loaded\r\n//     if (gigData && userData) {\r\n//       requestAccounts();\r\n//     }\r\n//   }, [gigData, userData]); // useEffect will run when gigData and userData change\r\n\r\n//   return (\r\n//     <div className=\"pay\">\r\n//       {/* UI elements */}\r\n//              <Reviews gigId={id} key={id}></Reviews>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Pay;\r\n// import React, { useEffect,useState } from \"react\";\r\n// import { useParams, useNavigate } from \"react-router-dom\";\r\n// import { useQuery } from \"@tanstack/react-query\";\r\n// import { ethers } from 'ethers'\r\n// import newRequest from \"../../utils/newRequest\";\r\n// import CheckoutForm from \"../../components/checkOutForm/CheckOutForm\";\r\n// import Reviews from \"../../components/reviews/Reviews\";\r\n// import \"./pay.scss\";\r\n// import axios from 'axios';\r\n\r\n// const Pay = () => {\r\n//   const [clientSecret, setClientSecret] = useState(\"\");\r\n\r\n//   const { id } = useParams();\r\n//   const { data: gigData } = useQuery({\r\n//     queryKey: ['gig'],\r\n//     queryFn: () => newRequest.get(`/gigs/single/${id}`).then(res => res.data)\r\n// });\r\n//   const userId = gigData?.userId;\r\n//   const { data: userData } = useQuery({\r\n//     queryKey: ['user'],\r\n//     queryFn: () => newRequest.get(`/users/${userId}`).then(res => res.data),    \r\n//     enabled: !!userId,\r\n// });\r\n\r\n//   useEffect(() => {\r\n//     const requestAccounts = async () => {\r\n//       if (!window.ethereum) {\r\n//         console.error(\"Ethereum object not found. You need to install MetaMask or another Ethereum wallet.\");\r\n//         return;\r\n//       }\r\n\r\n//       try {\r\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n//         console.log(\"Connected accounts:\", accounts);\r\n\r\n//         // Define the transaction parameters\r\n//         const transactionParameters = {\r\n//           from: accounts[0], // Use the first account\r\n//           to: userData?.wallet_address,\r\n//           gas: \"0x5208\", // Set to 21000, which is the basic transaction cost\r\n//           gasPrice: \"0x3B9ACA00\", // Adjusted to a lower typical value, e.g., 1 Gwei\r\n//           value: ethers.utils.parseUnits(gigData?.price.toString() || \"0\", \"ether\").toHexString(),\r\n        \r\n//         };\r\n\r\n//         // Send the transaction\r\n//         const txHash = await window.ethereum.request({\r\n//           method: 'eth_sendTransaction',\r\n//           params: [transactionParameters],\r\n//         });\r\n//         console.log(\"Transaction hash:\", txHash);\r\n\r\n//       } catch (error) {\r\n//         console.error(\"Error requesting accounts or sending transaction:\", error);\r\n//       }\r\n//     };\r\n//   }, [gigData, userData]);\r\n   \r\n   \r\n//     const makeRequest = async () => {\r\n//       if (!clientSecret && id) {  // Only run if clientSecret is not already set and id is present\r\n//         try {\r\n//           const res = await newRequest.post(\r\n//             `/orders/create-payment-intent/${id}`\r\n//           );\r\n//           setClientSecret(res.data.clientSecret);\r\n//         } catch (err) {\r\n//           console.log(err);\r\n//         }\r\n//     };\r\n//     makeRequest();\r\n//   },[id]);\r\n\r\n\r\n\r\n//   return (\r\n//     <div className=\"pay\">\r\n      \r\n//       <Reviews gigId={id} key={id} />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Pay;\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useQuery } from \"@tanstack/react-query\";\r\nimport { ethers } from 'ethers';\r\nimport newRequest from \"../../utils/newRequest\";\r\nimport Reviews from \"../../components/reviews/Reviews\";\r\nimport \"./pay.scss\";\r\n\r\nconst Pay = () => {\r\n  const [clientSecret, setClientSecret] = useState(\"\");\r\n  const { id } = useParams();\r\n\r\n  // Fetch gig data\r\n  const { data: gigData } = useQuery({\r\n    queryKey: ['gig'],\r\n    queryFn: () => newRequest.get(`/gigs/single/${id}`).then(res => res.data)\r\n  });\r\n\r\n  // Fetch user data once gig data is available and contains userId\r\n  const { data: userData } = useQuery({\r\n    queryKey: ['user'],\r\n    queryFn: () => newRequest.get(`/users/${gigData?.userId}`).then(res => res.data),    \r\n    enabled: !!gigData?.userId,\r\n  });\r\n\r\n  // Single useEffect to handle all related actions\r\n  useEffect(() => {\r\n    // Function to request wallet accounts from MetaMask\r\n    const requestAccounts = async () => {\r\n      if (!window.ethereum) {\r\n        console.error(\"Ethereum object not found. You need to install MetaMask or another Ethereum wallet.\");\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n        console.log(\"Connected accounts:\", accounts);\r\n\r\n        // Define the transaction parameters\r\n        const transactionParameters = {\r\n          from: accounts[0], // Use the first account\r\n          to: userData?.wallet_address,\r\n          gas: \"0x5208\", // Set to 21000, which is the basic transaction cost\r\n          gasPrice: \"0x3B9ACA00\", // Adjusted to a lower typical value, e.g., 1 Gwei\r\n          value: ethers.utils.parseUnits(gigData?.price.toString() || \"0\", \"ether\").toHexString(),\r\n        };\r\n\r\n        // Send the transaction\r\n        const txHash = await window.ethereum.request({\r\n          method: 'eth_sendTransaction',\r\n          params: [transactionParameters],\r\n        });\r\n        console.log(\"Transaction hash:\", txHash);\r\n      } catch (error) {\r\n        console.error(\"Error requesting accounts or sending transaction:\", error);\r\n      }\r\n    };\r\n\r\n    // Function to create payment intent\r\n    const makeRequest = async () => {\r\n      if (!clientSecret && id) {  // Only run if clientSecret is not already set and id is present\r\n        try {\r\n          const res = await newRequest.post(`/orders/create-payment-intent/${id}`);\r\n          setClientSecret(res.data.clientSecret);\r\n        } catch (err) {\r\n          console.error(err);\r\n        }\r\n      }\r\n    };\r\n\r\n    if (gigData && userData && !clientSecret) { // Only execute if all required data is loaded and no clientSecret is set\r\n      requestAccounts();\r\n      makeRequest();\r\n    }\r\n  }, [gigData, userData, clientSecret, id]); // Include all dependencies that could affect the effect execution\r\n\r\n  return (\r\n    <div className=\"pay\">\r\n      <Reviews gigId={id} key={id} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Pay;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACC;;AAED;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAIA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,QAAQ,QAAQ,uBAAuB;AAChD,SAASC,MAAM,QAAQ,QAAQ;AAC/B,OAAOC,UAAU,MAAM,wBAAwB;AAC/C,OAAOC,OAAO,MAAM,kCAAkC;AACtD,OAAO,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpB,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAC,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}