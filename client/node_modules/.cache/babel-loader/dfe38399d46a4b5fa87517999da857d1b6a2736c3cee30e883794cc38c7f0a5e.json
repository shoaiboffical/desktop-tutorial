{"ast":null,"code":"var _jsxFileName = \"C:\\\\project\\\\fiverr-clone\\\\client\\\\src\\\\pages\\\\pay\\\\Pay.jsx\",\n  _s = $RefreshSig$();\n// // import React, { useEffect, useState } from \"react\";\n// import React from \"react\";\n// import \"./pay.scss\";\n// import {ethers} from 'ethers';\n\n// // import { loadStripe } from \"@stripe/stripe-js\";\nimport { Elements } from \"@stripe/react-stripe-js\";\n// // import newRequest from \"../../utils/newRequest\";\n// // import { useParams } from \"react-router-dom\";\nimport CheckoutForm from \"../../components/checkOutForm/CheckOutForm\";\n\n// import { Slider } from \"infinite-react-carousel\";\n// import { useQuery } from \"@tanstack/react-query\";\n// import newRequest from \"../../utils/newRequest\";\n// import { Link, useParams } from \"react-router-dom\";\n// import Reviews from \"../../components/reviews/Reviews\";\n\n// const Pay = () => {\n\n//   const { id } = useParams();\n//   // console.log(id);\n//   const { data } = useQuery({\n//       queryKey: ['gig'],\n//       queryFn: () =>\n//           newRequest.get(`/gigs/single/${id}`)\n//               .then((res) => {\n//                   return res.data;\n//               })\n//   });\n//   const userId=data?.userId;\n//   const {  data: dataUser } = useQuery({\n//       queryKey: ['user'],\n//       queryFn: () =>\n//           newRequest.get(`/users/${userId}`)\n//               .then((res) => {\n//                   return res.data;    \n//               }),enabled:!!userId,\n//   });\n//   console.log(\"------------>>>>>>>>>>-------\");\n\n//    console.log(\"User's Wallet Address:\", dataUser?.username);\n//    console.log(\"User's Wallet Address:\", dataUser?.wallet_address);\n\n// console.log(\"Gig's Title:\", data?.price);\n\n// const requestAccounts = async () => {\n//   try {\n\n//     const accounts = await window.ethereum.request({\n//       method: 'eth_requestAccounts'\n//     });\n//     console.log(accounts); // Do something with the accounts\n\n//     // If you're sending a transaction, ensure this is in response to a user action\n\n//     const transactionParameters = {\n//       from: accounts,\n//       to: dataUser?.wallet_address,\n//       gas: \"0x76c0\", // 30400\n//       gasPrice: \"0x9184e72a000\", // 10000000000000\n//       value: data?.price, // 2441406250\n//       data: \"0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675\",\n//     };\n\n//     const txHash = await window.ethereum.request({\n//       method: 'eth_sendTransaction',\n//       params: [transactionParameters],\n//     });\n//     console.log(txHash); // Use the transaction hash as needed\n\n//   } catch (error) {\n//     console.error(error);\n//   }\n// };\n\n// requestAccounts();\n//   return <div className=\"pay\">\n//     {/* {clientSecret && (\n//         <Elements options={options} stripe={stripePromise}>\n//           <CheckoutForm />\n//         </Elements>\n//       )} */}\n\n//   </div>;\n// };\n\n// export default Pay;\n\nimport React, { useEffect } from \"react\";\nimport \"./pay.scss\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport newRequest from \"../../utils/newRequest\";\nimport { useParams } from \"react-router-dom\";\nimport Reviews from \"../../components/reviews/Reviews\";\nimport { ethers } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Pay = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const {\n    data: gigData\n  } = useQuery({\n    queryKey: ['gig'],\n    queryFn: () => newRequest.get(`/gigs/single/${id}`).then(res => res.data)\n  });\n  const userId = gigData === null || gigData === void 0 ? void 0 : gigData.userId;\n  const {\n    data: userData\n  } = useQuery({\n    queryKey: ['user'],\n    queryFn: () => newRequest.get(`/users/${userId}`).then(res => res.data),\n    enabled: !!userId\n  });\n  useEffect(() => {\n    const requestAccounts = async () => {\n      if (!window.ethereum) {\n        console.error(\"Ethereum object not found. You need to install MetaMask or another Ethereum wallet.\");\n        return;\n      }\n      try {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        console.log(\"Connected accounts:\", accounts);\n\n        // Define the transaction parameters\n        const transactionParameters = {\n          from: accounts[0],\n          // Use the first account\n          to: userData === null || userData === void 0 ? void 0 : userData.wallet_address,\n          gas: \"0x5208\",\n          // Set to 21000, which is the basic transaction cost\n          gasPrice: \"0x3B9ACA00\",\n          // Adjusted to a lower typical value, e.g., 1 Gwei\n          value: ethers.utils.parseUnits((gigData === null || gigData === void 0 ? void 0 : gigData.price.toString()) || \"0\", \"ether\").toHexString()\n        };\n\n        // Send the transaction\n        const txHash = await window.ethereum.request({\n          method: 'eth_sendTransaction',\n          params: [transactionParameters]\n        });\n        console.log(\"Transaction hash:\", txHash);\n      } catch (error) {\n        console.error(\"Error requesting accounts or sending transaction:\", error);\n      }\n    };\n\n    // Call requestAccounts if both gigData and userData are loaded\n    if (gigData && userData) {\n      requestAccounts();\n    }\n  }, [gigData, userData]); // useEffect will run when gigData and userData change\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pay\",\n    children: /*#__PURE__*/_jsxDEV(Elements, {\n      children: /*#__PURE__*/_jsxDEV(CheckoutForm, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 5\n  }, this);\n};\n_s(Pay, \"yaTHPrL0Kt3hZmZ5dbK1vVqtQ6s=\", false, function () {\n  return [useParams, useQuery, useQuery];\n});\n_c = Pay;\nexport default Pay;\nvar _c;\n$RefreshReg$(_c, \"Pay\");","map":{"version":3,"names":["Elements","CheckoutForm","React","useEffect","useQuery","newRequest","useParams","Reviews","ethers","jsxDEV","_jsxDEV","Pay","_s","id","data","gigData","queryKey","queryFn","get","then","res","userId","userData","enabled","requestAccounts","window","ethereum","console","error","accounts","request","method","log","transactionParameters","from","to","wallet_address","gas","gasPrice","value","utils","parseUnits","price","toString","toHexString","txHash","params","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/project/fiverr-clone/client/src/pages/pay/Pay.jsx"],"sourcesContent":["// // import React, { useEffect, useState } from \"react\";\r\n// import React from \"react\";\r\n// import \"./pay.scss\";\r\n// import {ethers} from 'ethers';\r\n\r\n// // import { loadStripe } from \"@stripe/stripe-js\";\r\n import { Elements } from \"@stripe/react-stripe-js\";\r\n// // import newRequest from \"../../utils/newRequest\";\r\n// // import { useParams } from \"react-router-dom\";\r\n import CheckoutForm from \"../../components/checkOutForm/CheckOutForm\";\r\n\r\n// import { Slider } from \"infinite-react-carousel\";\r\n// import { useQuery } from \"@tanstack/react-query\";\r\n// import newRequest from \"../../utils/newRequest\";\r\n// import { Link, useParams } from \"react-router-dom\";\r\n// import Reviews from \"../../components/reviews/Reviews\";\r\n\r\n\r\n// const Pay = () => {\r\n\r\n//   const { id } = useParams();\r\n//   // console.log(id);\r\n//   const { data } = useQuery({\r\n//       queryKey: ['gig'],\r\n//       queryFn: () =>\r\n//           newRequest.get(`/gigs/single/${id}`)\r\n//               .then((res) => {\r\n//                   return res.data;\r\n//               })\r\n//   });\r\n//   const userId=data?.userId;\r\n//   const {  data: dataUser } = useQuery({\r\n//       queryKey: ['user'],\r\n//       queryFn: () =>\r\n//           newRequest.get(`/users/${userId}`)\r\n//               .then((res) => {\r\n//                   return res.data;    \r\n//               }),enabled:!!userId,\r\n//   });\r\n//   console.log(\"------------>>>>>>>>>>-------\");\r\n   \r\n//    console.log(\"User's Wallet Address:\", dataUser?.username);\r\n//    console.log(\"User's Wallet Address:\", dataUser?.wallet_address);\r\n\r\n// console.log(\"Gig's Title:\", data?.price);\r\n\r\n// const requestAccounts = async () => {\r\n//   try {\r\n   \r\n//     const accounts = await window.ethereum.request({\r\n//       method: 'eth_requestAccounts'\r\n//     });\r\n//     console.log(accounts); // Do something with the accounts\r\n\r\n//     // If you're sending a transaction, ensure this is in response to a user action\r\n    \r\n//     const transactionParameters = {\r\n//       from: accounts,\r\n//       to: dataUser?.wallet_address,\r\n//       gas: \"0x76c0\", // 30400\r\n//       gasPrice: \"0x9184e72a000\", // 10000000000000\r\n//       value: data?.price, // 2441406250\r\n//       data: \"0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675\",\r\n//     };\r\n\r\n//     const txHash = await window.ethereum.request({\r\n//       method: 'eth_sendTransaction',\r\n//       params: [transactionParameters],\r\n//     });\r\n//     console.log(txHash); // Use the transaction hash as needed\r\n   \r\n//   } catch (error) {\r\n//     console.error(error);\r\n//   }\r\n// };\r\n\r\n// requestAccounts();\r\n//   return <div className=\"pay\">\r\n//     {/* {clientSecret && (\r\n//         <Elements options={options} stripe={stripePromise}>\r\n//           <CheckoutForm />\r\n//         </Elements>\r\n//       )} */}\r\n \r\n  \r\n    \r\n      \r\n//   </div>;\r\n// };\r\n\r\n// export default Pay;\r\n\r\nimport React, { useEffect } from \"react\";\r\nimport \"./pay.scss\";\r\nimport { useQuery } from \"@tanstack/react-query\";\r\nimport newRequest from \"../../utils/newRequest\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Reviews from \"../../components/reviews/Reviews\";\r\nimport {ethers} from 'ethers';\r\n\r\nconst Pay = () => {\r\n  const { id } = useParams();\r\n\r\n  const { data: gigData } = useQuery({\r\n      queryKey: ['gig'],\r\n      queryFn: () => newRequest.get(`/gigs/single/${id}`).then(res => res.data)\r\n  });\r\n\r\n  const userId = gigData?.userId;\r\n\r\n  const { data: userData } = useQuery({\r\n      queryKey: ['user'],\r\n      queryFn: () => newRequest.get(`/users/${userId}`).then(res => res.data),    \r\n      enabled: !!userId,\r\n  });\r\n\r\n  useEffect(() => {\r\n    const requestAccounts = async () => {\r\n      if (!window.ethereum) {\r\n        console.error(\"Ethereum object not found. You need to install MetaMask or another Ethereum wallet.\");\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n        console.log(\"Connected accounts:\", accounts);\r\n\r\n        // Define the transaction parameters\r\n        const transactionParameters = {\r\n          from: accounts[0], // Use the first account\r\n          to: userData?.wallet_address,\r\n          gas: \"0x5208\", // Set to 21000, which is the basic transaction cost\r\n          gasPrice: \"0x3B9ACA00\", // Adjusted to a lower typical value, e.g., 1 Gwei\r\n          value: ethers.utils.parseUnits(gigData?.price.toString() || \"0\", \"ether\").toHexString(),\r\n        \r\n        };\r\n\r\n        // Send the transaction\r\n        const txHash = await window.ethereum.request({\r\n          method: 'eth_sendTransaction',\r\n          params: [transactionParameters],\r\n        });\r\n        console.log(\"Transaction hash:\", txHash);\r\n\r\n      } catch (error) {\r\n        console.error(\"Error requesting accounts or sending transaction:\", error);\r\n      }\r\n    };\r\n\r\n    // Call requestAccounts if both gigData and userData are loaded\r\n    if (gigData && userData) {\r\n      requestAccounts();\r\n    }\r\n  }, [gigData, userData]); // useEffect will run when gigData and userData change\r\n\r\n  return (\r\n    <div className=\"pay\">\r\n      {/* UI elements */}\r\n      <Elements>\r\n          <CheckoutForm />\r\n        </Elements>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Pay;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}